FROM python:3.8

ENV DEBIAN_FRONTEND noninteractive 

# Install nvidia HPC sdk
RUN apt-get update -y && \
    apt-get install -y -q wget git apt-utils vim curl jq && \
    apt-get install -y -q liblapack-dev libblas-dev libibverbs-dev && \
    wget -q -P /app/ https://developer.download.nvidia.com/hpc-sdk/21.5/nvhpc-21-5_21.5_amd64.deb \ 
         https://developer.download.nvidia.com/hpc-sdk/21.5/nvhpc-2021_21.5_amd64.deb && \
    apt-get install -y -q /app/nvhpc-21-5_21.5_amd64.deb /app/nvhpc-2021_21.5_amd64.deb && \
    apt-get update -y && \
    rm -rf /app/nvhpc* && \
    rm -rf /var/lib/apt/lists/*

ARG HPCSDK_HOME=/opt/nvidia/hpc_sdk/Linux_x86_64/2021
ARG HPCSDK_CUPTI=/opt/nvidia/hpc_sdk/Linux_x86_64/2021/cuda/11.3/extras/CUPTI

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# required for nvidia-docker v1
RUN echo "$HPCSDK_HOME/cuda/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/cuda/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/compilers/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/comm_libs/mpi/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_CUPTI/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "$HPCSDK_HOME/math_libs/lib64" >> /etc/ld.so.conf.d/nvidia.conf  

# Compiler, CUDA, and Library paths
ENV CUDA_HOME $HPCSDK_HOME/cuda
ENV CUDA_ROOT $HPCSDK_HOME/cuda/bin
ENV PATH $HPCSDK_HOME/compilers/bin:$HPCSDK_HOME/cuda/bin:$HPCSDK_HOME/comm_libs/mpi/bin:${PATH}
ENV LD_LIBRARY_PATH $HPCSDK_HOME/cuda/lib:$HPCSDK_HOME/cuda/lib64:$HPCSDK_HOME/compilers/lib:$HPCSDK_HOME/math_libs/lib64:$HPCSDK_HOME/comm_libs/mpi/lib:$HPCSDK_CUPTI/lib64:${LD_LIBRARY_PATH}

# Make julia use preinstalled cuda
ENV JULIA_CUDA_USE_BINARYBUILDER false

# Install Julia
ARG JVER=1.7
ADD ./docker/get_julia.sh get_julia.sh
RUN chmod +x get_julia.sh && ./get_julia.sh $JVER && rm get_julia.sh

# Install requirements
RUN pip3 install -r https://raw.githubusercontent.com/microsoft/AzureClusterlessHPC.jl/main/pyrequirements.txt

# Manually install unregistered packages and JUDI
RUN julia -e 'using Pkg;Pkg.update()'
RUN julia -e 'using Pkg;Pkg.Registry.add(RegistrySpec(url="https://Github.com/slimgroup/SLIMregistryJL.git"))'

RUN for pkg in "SegyIO" "JOLI" "JUDI" "SlimOptim" "InvertibleNetworks"; do \
		julia -e "using Pkg;Pkg.develop(\"$pkg\");using $pkg"; \
	done
RUN for pkg in "LineSearches" "Optim" "DSP" "Dierckx" "NLopt" "FFTW" "SetIntersectionProjection" "IterativeSolvers" "JLD" \
               "Flux" "Zygote" "JLD2" "HDF5" "PyPlot" "PyCall" "Distributed" "Images" "SlimPlotting"; do \
		julia -e "using Pkg;Pkg.add(\"$pkg\"); using $pkg"; \
	done

RUN PYTHON=$(which python3) julia -e 'using Pkg; Pkg.build("PyCall")'

# Environment variables
ENV JULIA_DEPOT_PATH="/root/.julia" \
    PYTHONPATH="/usr/local/lib/python3.8/dist-packages"

# clean
RUN rm -rf /var/lib/apt/lists/* \
	&& apt-get clean

# Install and build IJulia
RUN pip3 install --user jupyter matplotlib devito
ENV JUPYTER="/root/.local/bin/jupyter"
RUN julia -e 'using Pkg; Pkg.add("IJulia")'

# remove older cuda version that are not needed
ADD ./docker/entry_compilers.sh entry.sh
RUN chmod +x entry.sh
ENTRYPOINT ["/entry.sh"]

# Default env as CPU
ENV DEVITO_ARCH="gcc" 
ENV DEVITO_LANGUAGE="openmp"
ENV DEVITO_PLATFORM=cpu64
ENV DEVITO_LOGGING="ERROR"

WORKDIR /app/judi/notebooks

EXPOSE 8888

CMD /root/.local/bin/jupyter-notebook --ip="*" --no-browser --allow-root
