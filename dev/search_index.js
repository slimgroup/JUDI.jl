var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorials","page":"Tutorial","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"These tutorials provide instructions of how to set up various modeling or inversion scenarios with JUDI. For a list of runnable Julia scripts and reproducable research, please also check out the examples directory on Github.","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Pages = [\"tutorials.md\"]","category":"page"},{"location":"tutorials/#D-Modeling-Quickstart","page":"Tutorial","title":"2D Modeling Quickstart","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To set up a simple 2D modeling experiment with JUDI with an OBN-type acquisition (receivers everywhere), we start by loading the module and building a two layer model:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using JUDI\n\n# Grid\nn = (120, 100)   # (x,z)\nd = (10., 10.)\no = (0., 0.)\n\n# Velocity [km/s]\nv = ones(Float32, n) .* 1.4f0\nv[:, 50:end] .= 5f0\n\n# Squared slowness\nm = (1f0 ./ v).^2","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"For working with JUDI operators, we need to set up a model structure, which contains the grid information, as well as the slowness. Optionally, we can provide an array of the density in g/cm^3 (by default a density of 1 is used):","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Density (optional)\nrho = ones(Float32, n)\n\n# Model structure:\nmodel = Model(n, d, o, m; rho=rho)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we define our source acquisition geometry, which needs to be defined as a Geometry structure. The Geometry function requires the x-, y- and z-coordinates of the source locations as input, as well as the modeling time and samping interval of the wavelet. In general, each parameter can be passed as a cell array, where each cell entry provides the information for the respective source location. The helper function convertToCell converts a Julia range to a cell array, which makes defining the source geometry easier:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up source geometry\nnsrc = 4    # no. of sources\nxsrc = convertToCell(range(400f0, stop=800f0, length=nsrc))\nysrc = convertToCell(range(0f0, stop=0f0, length=nsrc))\nzsrc = convertToCell(range(20f0, stop=20f0, length=nsrc))\n\n# Modeling time and sampling interval\ntime = 1000f0  # ms\ndt = 2f0   # ms\n\n# Set up source structure\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Now we can define our source wavelet. The source must be defined as a judiVector, which takes the source geometry, as well as the source data (i.e. the wavelet) as an input argument:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Source wavelet\nf0 = 0.01f0     # kHz\nwavelet = ricker_wavelet(time, dt, f0)\nq = judiVector(src_geometry, wavelet)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"In general, wavelet can be a cell array with a different wavelet in each cell, i.e. for every source location. Here, we want to use the same wavelet for all 4 source experiments, so we can simply pass a single vector. As we already specified in our src_geometry object that we want to have 4 source locations, judiVector will automaticallty copy the wavelet for every experiment.","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we set up the receiver acquisition geometry. Here, we define an OBN acquisition, where the receivers are spread out over the entire domain and each source experiment uses the same set of receivers. Again, we can in principle pass the coordinates as cell arrays, with one cell per source location. Since we want to use the same geometry for every source, we can use a short cut and define the coordinates as Julia ranges and pass nsrc=nsrc as an optional argument to the Geometry function. This tells the function that we want to use our receiver set up for nsrc distinct source experiments:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up receiver geometry (for 2D, set yrec to zero)\nnxrec = 120\nxrec = range(50f0, stop=1150f0, length=nxrec)\nyrec = 0f0\nzrec = range(50f0, stop=50f0, length=nxrec)\n\n# Set up receiver structure\nrec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"With our model and source and receiver geometries in place, we can proceed to defining our linear operator for seismic modeling. First, we need to define an info object, which contains some basic dimensionality information that needs to be shared between operators so that they can determine their size:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up info structure for linear operators\nntComp = get_computational_nt(src_geometry, rec_geometry, model)\ninfo = Info(prod(n), nsrc, ntComp)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we can define separate operators for source/receiver projections and a forward modeling operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Setup operators\nPr = judiProjection(info, rec_geometry)\nA_inv = judiModeling(info, model)\nPs = judiProjection(info, src_geometry)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can see, that from JUDI's perspective, source and receivers are treated equally and are represented by the same operators (judiProjection) and vectors (judiVector).","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We also could've skipped setting up the projection operators and directly created:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"F = judiModeling(info, model, src_geometry, rec_geometry)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"which is equivalent to creating the combined operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"F = Pr*A_inv*Ps'","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Finally, to model our seismic data, we run:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"d_obs = Pr*A_inv*Ps'*q\n# or\nd_obs = F*q","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can plot a 2D shot record by accessing the .data field of the judiVector, which contains the data in the original (non-vectorized) dimensions:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using PyPlot\nimshow(d_obs.data[1], vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\")","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can also set up a Jacobian operator for Born modeling and reverse-time migration. First we set up a (constant) migration velocity model:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"v0 = ones(Float32, n) .* 1.4f0\nm0 = (1f0 ./ v0).^2\ndm = m - m0     # model perturbation/image\n\n# Model structure\nmodel0 = Model(n, d, o, m0)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can create the Jacobian directly from a (non-linear) modeling operator and a source vector:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"A0_inv = judiModeling(info, model0) # modeling operator for migration velocity\nJ = judiJacobian(Pr*A0_inv*Ps', q)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can use this operator to model single scattered data, as well as for migration our previous data:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"d_lin = J*vec(dm)\n\n# RTM\nrtm = J'*d_obs","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To plot, first reshape the image:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"rtm = reshape(rtm, model0.n)\nimshow(rtm', cmap=\"gray\", vmin=-1e3, vmax=1e3)","category":"page"},{"location":"tutorials/#D-Modeling-Quickstart-2","page":"Tutorial","title":"3D Modeling Quickstart","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Setting up a 3D experiment largely follows the instructions for the 2D example. Instead of a 2D model, we define our velocity model as:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using JUDI\n\n# Grid\nn = (120, 100, 80)   # (x,y,z)\nd = (10., 10., 10.)\no = (0., 0., 0.)\n\n# Velocity [km/s]\nv = ones(Float32, n) .* 1.4f0\nv[:, :, 40:end] .= 5f0\n\n# Squared slowness and model structure\nm = (1f0 ./ v).^2\nmodel = Model(n, d, o, m)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Our source coordinates now also need to have the y-coordinate defined:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up source geometry\nnsrc = 4    # no. of sources\nxsrc = convertToCell(range(400f0, stop=800f0, length=nsrc))\nysrc = convertToCell(range(200f0, stop=1000f0, length=nsrc))\nzsrc = convertToCell(range(20f0, stop=20f0, length=nsrc))\n\n# Modeling time and sampling interval\ntime = 1000f0  # ms\ndt = 2f0   # ms\n\n# Set up source structure\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Our source wavelet, is set up as in the 2D case:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Source wavelet\nf0 = 0.01f0     # kHz\nwavelet = ricker_wavelet(time, dt, f0)\nq = judiVector(src_geometry, wavelet)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"For the receivers, we generally need to define each coordinate (x, y, z) for every receiver. I.e. xrec, yrec and zrec each have the length of the total number of receivers. However, oftentimes we are interested in a regular receiver grid, which can be defined by two basis vectors and a constant depth value for all receivers. We can then use the setup_3D_grid helper function to create the full set of coordinates:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Receiver geometry\nnxrec = 120\nnyrec = 100\nxrec = range(50f0, stop=1150f0, length=nxrec)\nyrec = range(100f0, stop=900f0, length=nyrec)\nzrec = 50f0\n\n# Construct 3D grid from basis vectors\n(xrec, yrec, zrec) = setup_3D_grid(xrec, yrec, zrec)\n\n# Set up receiver structure\nrec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Setting up the modeling operators is done as in the previous 2D case:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up info structure for linear operators\nntComp = get_computational_nt(src_geometry, rec_geometry, model)\ninfo = Info(prod(n), nsrc, ntComp)\n\n# Setup operators\nPr = judiProjection(info, rec_geometry)\nA_inv = judiModeling(info, model)\nPs = judiProjection(info, src_geometry)\n\n# Model data\nd_obs = Pr*A_inv*Ps'*q","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"The 3D shot records are still saved as 2D arrays of dimensions time x (nxrec*nyrec):","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using PyPlot\nimshow(d_obs.data[1], vmin=-.4, vmax=.4, cmap=\"seismic\", aspect=\"auto\")","category":"page"},{"location":"tutorials/#Vertical-and-tilted-transverse-isotropic-modeling-(VTI,-TTI)","page":"Tutorial","title":"Vertical and tilted-transverse isotropic modeling (VTI, TTI)","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI supports both VTI and TTI modeling based on a coupled pseudo-acoustic wave equation. To enable VTI/TTI modeling, simply pass Thomsen parameters as well as the tilt angles to the Model structure as optional keyword arguments:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Grid and model\nn = (120, 100, 80)\nd = (10., 10., 10)\no = (0., 0., 0.)\n\n# Velocity\nv = ones(Float32, n) .* 1.5f0\nm = 1f0 ./ v.^2\n\n# Thomsen parameters\nepsilon = ones(Float32, n) .* 0.2f0\ndelta = ones(Float32, n) .* 0.1f0\n\n# Tile angles for TTI\ntheta = ones(Float32, n) .* pi/2f0\nphi = ones(Float32, n) .* pi/3f0    # 3D only\n\n# Set up model structure with Thomsen parameters\nmodel = Model(n, d, o, m; rho=rho, epsilon=epsilon, delta=delta, theta=theta, delta=delta)","category":"page"},{"location":"tutorials/#Modeling-with-density","page":"Tutorial","title":"Modeling with density","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To use density, pass rho in the units of [g/cm^3] as an optional keyword argument to the Model structure. The default density is rho=1f0 (i.e. density of water):","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Grid and model\nn = (120, 100)\nd = (10., 10.)\no = (0., 0.)\nv = ones(Float32, n) .* 1.5f0\nm = 1f0 ./ v.^2\nrho = ones(Float32, n) .* 1.1f0\n\n# Set up model structure with density\nmodel = Model(n, d, o, m; rho=rho)","category":"page"},{"location":"tutorials/#D-Marine-streamer-acquisition","page":"Tutorial","title":"2D Marine streamer acquisition","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"For a marine streamer acquisition, we need to define a moving set of receivers representing a streamer that is towed behind a seismic source vessel. In JUDI, this is easily done by defining a different set of receivers for each source location. Here, we explain how to set up the Geometry objects for a 2D marine streamer acquisition.","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"If we define that our streamer is to the right side of the source vessel, this has the effect that part of the streamer is outside the grid while our vessel is in the right side of the model. To circumvent this, we can say that our streamer is on the right side of the source while the vessel is in the left-hand side of the model and vice versa. This way, we get the full maximum offset coverage for every source location (assuming that the maximum offset is less or equal than half the domain size). ","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"First, we have to specify our domain size (the physical extent of our model), as well as the number of receivers and the minimum and maximum offset:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"domain_x = (model.n[1] - 1)*model.d[1]    # horizontal extent of model\nnrec = 120     # no. of receivers\nxmin = 50f0    # leave buffer zone w/o source and receivers of this size\nxmax = domain_x - 50f0\nmin_offset = 10f0      # distance between source and first receiver\nmax_offset = 400f0    # distance between source and last\nxmid = domain_x / 2     # midpoint of model\nsource_spacing = 25f0   # source interval [m]","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"For the JUDI Geometry objects, we need to create cell arrays for the source and receiver coordinates, with one cell entry per source location:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Source/receivers\nnsrc = 20   # number of shot locations\n\n# Receiver coordinates\nxrec = Array{Any}(undef, nsrc)\nyrec = Array{Any}(undef, nsrc)\nzrec = Array{Any}(undef, nsrc)\n\n# Source coordinates\nxsrc = Array{Any}(undef, nsrc)\nysrc = Array{Any}(undef, nsrc)\nzsrc = Array{Any}(undef, nsrc)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we compute the source and receiver coordinates for when the vessel moves from left to right in the right-hand side of the model:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Vessel goes from left to right in right-hand side of model\nnsrc_half = Int(nsrc/2)\nfor j=1:nsrc_half\n    xloc = xmid + (j-1)*source_spacing\n\n    # Current receiver locations\n    xrec[j] = range(xloc - max_offset, xloc - min_offset, length=nrec)\n    yrec[j] = 0.\n    zrec[j] = range(50f0, 50f0, length=nrec)\n    \n    # Current source\n    xsrc[j] = xloc\n    ysrc[j] = 0f0\n    zsrc[j] = 20f0\nend","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Then, we repeat this for the case where the vessel goes from right to left in the left-hand model side:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Vessel goes from right to left in left-hand side of model\nfor j=1:nsrc_half\n    xloc = xmid - (j-1)*source_spacing\n    \n    # Current receiver locations\n    xrec[nsrc_half + j] = range(xloc + min_offset, xloc + max_offset, length=nrec)\n    yrec[nsrc_half + j] = 0f0\n    zrec[nsrc_half + j] = range(50f0, 50f0, length=nrec)\n    \n    # Current source\n    xsrc[nsrc_half + j] = xloc\n    ysrc[nsrc_half + j] = 0f0\n    zsrc[nsrc_half + j] = 20f0\nend","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Finally, we can set the modeling time and sampling interval and create the Geometry objects:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# receiver sampling and recording time\ntime = 10000f0   # receiver recording time [ms]\ndt = 4f0    # receiver sampling interval\n\n# Set geometry objects\nrec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time)\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"You can find a full (reproducable) example for generating a marine streamer data set for the Sigsbee 2A model here.","category":"page"},{"location":"tutorials/#Simultaneous-sources","page":"Tutorial","title":"Simultaneous sources","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To set up a simultaneous source with JUDI, we first create a cell array with nsrc cells, where nsrc is the number of separate experiments (here nsrc=1). For a simultaneous source, we create an array of source coordinates for each cell entry. In fact, this is exactly like setting up the receiver geometry, in which case we define multiple receivers per shot location. Here, we define a single experiment with a simultaneous source consisting of four sources:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"nsrc = 1    # single simultaneous source\nxsrc = Array{Any}(undef, nsrc)\nysrc = Array{Any}(undef, nsrc)\nzsrc = Array{Any}(undef, nsrc)\n\n# Set up source geometry\nxsrc[1] = [250f0, 500f0, 750f0, 1000f0]     # four simultaneous sources\nysrc[1] = 0f0\nzsrc[1] = [50f0, 50f0, 50f0, 50f0]\t\n\n# Source sampling and number of time steps\ntime = 2000f0\ndt = 4f0\n\n# Set up source structure\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"With the simultaneous source geometry in place, we can now create our simultaneous data. As we have four sources per sim. source, we create an array of dimensions 4 x src_geometry.nt[1] and fill it with wavelets of different time shifts:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Create wavelet\nf0 = 0.01\t# source peak frequencies\nq = ricker_wavelet(500f0, dt, f0)  # 500 ms wavelet\n\n# Create array with different time shifts of the wavelet\nwavelet = zeros(Float32, 4, src_geometry.nt[1])\nwavelet[1, 1:1+length(q)-1] = q\nwavelet[2, 41:41+length(q)-1] = q\nwavelet[3, 121:121+length(q)-1] = q\nwavelet[4, 201:201+length(q)-1] = q","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Finally, we create our simultaneous source as a judiVector:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Source wavelet\nq = judiVector(src_geometry, wavelet)","category":"page"},{"location":"tutorials/#Working-with-wavefields","page":"Tutorial","title":"Working with wavefields","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI allows computing full time domain wavefields and using them as right-hand sides for wave equations solves. This tutorial shows how. We start by setting up a basic 2D experiment:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using JUDI\n\n# Grid\nn = (120, 100)   # (x,z)\nd = (10., 10.)\no = (0., 0.)\n\n# Velocity [km/s]\nv = ones(Float32, n) .* 1.4f0\nv[:, 50:end] .= 5f0\n\n# Squared slowness\nm = (1f0 ./ v).^2\n\n# Model structure:\nmodel = Model(n, d, o, m)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we set up the source geometry for a single source experiment:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up source geometry\nnsrc = 1    # no. of sources\nxsrc = convertToCell([600f0])\nysrc = convertToCell([0f0])\nzsrc = convertToCell([20f0])\n\n# Modeling time and sampling interval\ntime = 600f0  # ms\ndt = 4f0   # ms\n\n# Set up source structure\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time)\n\n# Source wavelet\nf0 = 0.01f0     # kHz\nwavelet = ricker_wavelet(time, dt, f0)\nq = judiVector(src_geometry, wavelet)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"As in the 2D quick start tutorial, we create our info structure, modeling operator and source projection operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up info structure for linear operators\nntComp = get_computational_nt(src_geometry, model)\ninfo = Info(prod(n), nsrc, ntComp)\n\n# Setup operators\nA_inv = judiModeling(info, model)\nPs = judiProjection(info, src_geometry)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To model a wavefield, we simply omit the receiver sampling operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"u = A_inv*Ps'*q","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"This return an abstract data vector called judiWavefield. Similar to judiVectors, we can access the data for each source number i via u.data[i]. The data is a 3D array of size (nt, nx, nz) for 2D and a 4D array of size (nt, nx, ny, nz) for 3D. We can plot the wavefield of the 600th time step with:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using PyPlot\nimshow(u.data[1][600, :, :]', vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\")","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We can also use the computed wavefield u as a right-hand side for forward and adjoint wave equation solves:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"v = A_inv*u\nw = A_inv'*u","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Similarly, by setting up a receiver projection operator, we can use wavefields as right-hand sides, but restrict the output to the receiver locations.","category":"page"},{"location":"tutorials/#Extended-source-modeling","page":"Tutorial","title":"Extended source modeling","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI supports extened source modeling, which injects a 1D wavelet q at every point in the subsurface weighted by a spatially varying extended source. To demonstrate extended source modeling, we first set up a runnable 2D experiment with JUDI. We start with defining the model:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"using JUDI\n\n# Grid\nn = (120, 100)   # (x,z)\nd = (10., 10.)\no = (0., 0.)\n\n# Velocity [km/s]\nv = ones(Float32, n) .* 1.4f0\nv[:, 50:end] .= 5f0\n\n# Squared slowness\nm = (1f0 ./ v).^2\n\n# Model structure:\nmodel = Model(n, d, o, m)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Next, we set up the receiver geometry:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Number of experiments\nnsrc = 2\n\n# Set up receiver geometry\nnxrec = 120\nxrec = range(50f0, stop=1150f0, length=nxrec)\nyrec = 0f0\nzrec = range(50f0, stop=50f0, length=nxrec)\n\n# Modeling time and receiver sampling interval\ntime = 2000\ndt = 4\n\n# Set up receiver structure\nrec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"For the extended source, we do not need to set up a source geometry object, but we need to define a wavelet function:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Source wavelet\nf0 = 0.01f0     # MHz\nwavelet = ricker_wavelet(time, dt, f0)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"As before, we set up an info structure, as well as a modeling operator and a receiver sampling operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Set up info structure for linear operators\nntComp = get_computational_nt(rec_geometry, model)\ninfo = Info(prod(n), nsrc, ntComp)\n\n# Setup operators\nA_inv = judiModeling(info, model)\nPr = judiProjection(info, rec_geometry)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"We define our extended source as a so called judiWeights vector. Similar to a judiVector, the data of this abstract vector is stored as a cell array, where each cell corresponds to one source experiment. We create a cell array of length two and create a random array of the size of the model as our extended source:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"weights = Array{Array}(undef, nsrc)\nfor j=1:nsrc\n    weights[j] = randn(Float32, model.n)\nend\nw = judiWeights(weights)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"To inject the extended source into the model and weight it by the wavelet, we create a special projection operator called judiLRWF (for JUDI low-rank wavefield). This operator needs to know the wavelet we defined earlier. We can then create our full modeling operator, by combining Pw with A_inv and the receiver sampling operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Create operator for injecting the weights, multiplied by the provided wavelet(s)\nPw = judiLRWF(info, wavelet)\n\n# Model observed data w/ extended source\nF = Pr*A_inv*adjoint(Pw)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Extended source modeling supports both forward and adjoint modeling:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Simultaneous observed data\nd_sim = F*w\ndw = adjoint(F)*d_sim","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"As for regular modeling, we can create a Jacobian for linearized modeling and migration. First we define a migration velocity model and the corresponding modeling operator A0_inv:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Migration velocity and squared slowness\nv0 = ones(Float32, n) .* 1.4f0\nm0 = (1f0 ./ v0).^2\n\n# Model structure and modeling operator for migration velocity\nmodel0 = Model(n, d, o, m0)\nA0_inv = judiModeling(info, model0)\n\n# Jacobian and RTM\nJ = judiJacobian(Pr*A0_inv*adjoint(Pw), w)\nrtm = adjoint(J)*d_sim","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"As before, we can plot the image after reshaping it into its original dimensions:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"rtm = reshape(rtm, model.n)\nimshow(rtm', cmap=\"gray\", vmin=-3e6, vmax=3e6)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Please also refer to the reproducable example on github for 2D and 3D extended modeling.","category":"page"},{"location":"tutorials/#Impedance-imaging-(inverse-scattering)","page":"Tutorial","title":"Impedance imaging (inverse scattering)","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI supports imaging (RTM) and demigration (linearized modeling) using the linearized inverse scattering imaging condition (ISIC) and its corresponding adjoint. ISIC can be enabled via the Options class. You can set this options when you initially create the modeling operator:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Options strucuture\nopt = Options(isic=true)\n\n# Set up modeling operator\nA0_inv = judiModeling(info, model0; options=opt)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"J = judiJacobian(Pr*A0_inv*Ps', q)\nJ.options.isic\n# -> true","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Alternatively, you can directly set the option in your Jacobian:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"J.options.isic = true   # enable isic\nJ.options.isic = false  # disable isic","category":"page"},{"location":"tutorials/#Optimal-checkpointing","page":"Tutorial","title":"Optimal checkpointing","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI supports optimal checkpointing via Devito's interface to the Revolve library. To enable checkpointing, use the Options class:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Options strucuture\nopt = Options(optimal_checkpointing=true)\n\n# Set up modeling operator\nA0_inv = judiModeling(info, model0; options=opt)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"J = judiJacobian(Pr*A0_inv*Ps', q)\nJ.options.optimal_checkpointing\n# -> true","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Alternatively, you can directly set the option in your Jacobian:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"J.options.optimal_checkpointing = true   # enable checkpointing\nJ.options.optimal_checkpointing = false  # disable checkpointing","category":"page"},{"location":"tutorials/#On-the-fly-Fourier-transforms","page":"Tutorial","title":"On-the-fly Fourier transforms","text":"","category":"section"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"JUDI supports seismic imaging in the frequency domain using on-the-fly discrete Fourier transforms (DFTs). To compute an RTM image in the frequency domain for a given set of frequencies, we first create a cell array for the frequencies of each source experiment:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"nsrc = 4    # assume 4 source experiments\nfrequencies = Array{Any}(undef, nsrc)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Now we can define single or multiple frequencies for each shot location for which the RTM image will be computed:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# For every source location, compute RTM image for 10 and 20 Hz\nfor j=1:nsrc\n    frequencies[j] = [0.001, 0.002]\nend","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"The frequencies are passed to the Jacobian via the options field. Assuming we already have a Jacobian set up, we set the frequencies via:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"J.options.frequencies = frequencies","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Instead of the same two frequencies for each source experiment, we could have chosen different random sets of frequencies, which creates an RTM with incoherent noise. We can also draw random frequencies using the frequency spectrum of the true source as the probability density function. To create a distribution for a given source q (judiVector) from which we can draw frequency samples, use:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"q_dist = generate_distribution(q)","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Then we can assigne a random set of frequencies in a specified range as follows:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"nfreq = 10  # no. of frequencies per source location\nfor j=1:nsrc\n    J.options.frequencies[j] = select_frequencies(q_dist; fmin=0.003, fmax=0.04, nf=nfreq)\nend","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"Once the options.frequencies field is set, on-the-fly DFTs are used for both born modeling and RTM. To save computational cost, we can limit the number of DFTs that are performed. Rather than computing the DFT at every time step, we can define a subsampling factor as follows:","category":"page"},{"location":"tutorials/","page":"Tutorial","title":"Tutorial","text":"# Compute DFT every 4 time steps\nJ.options.dft_subsampling_factor=4","category":"page"},{"location":"pysource/#pysource-package","page":"Devito backend reference","title":"pysource package","text":"","category":"section"},{"location":"pysource/#Submodules","page":"Devito backend reference","title":"Submodules","text":"","category":"section"},{"location":"pysource/#FD_utils-module","page":"Devito backend reference","title":"FD_utils module","text":"","category":"section"},{"location":"pysource/#FD*utils.R*mat(model)","page":"Devito backend reference","title":"FDutils.Rmat(model)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Rotation matrix according to tilt and asymut.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Model structure","category":"page"},{"location":"pysource/#FD*utils.divs(func,-so*fact1,-side-1)","page":"Devito backend reference","title":"FDutils.divs(func, sofact=1, side=- 1)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"GrDivergenceadient shifted by half a grid point, only to be used in combination with grads.","category":"page"},{"location":"pysource/#FD*utils.grads(func,-so*fact1,-side1)","page":"Devito backend reference","title":"FDutils.grads(func, sofact=1, side=1)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Gradient shifted by half a grid point, only to be used in combination with divs.","category":"page"},{"location":"pysource/#FD_utils.laplacian(v,-irho)","page":"Devito backend reference","title":"FD_utils.laplacian(v, irho)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Laplacian with density div( 1/rho grad) (u)","category":"page"},{"location":"pysource/#FD*utils.sa*tti(u,-v,-model)","page":"Devito backend reference","title":"FDutils.satti(u, v, model)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Tensor factorized SSA TTI wave equation spatial derivatives.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction) – first TTI field","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction*) – second TTI field\n\n\n* **model** (*Model*) – Model structure","category":"page"},{"location":"pysource/#FD*utils.thomsen*mat(model)","page":"Devito backend reference","title":"FDutils.thomsenmat(model)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Diagonal Matrices with Thomsen parameters for vectorial temporaries computation.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Model structure","category":"page"},{"location":"pysource/#checkpoint-module","page":"Devito backend reference","title":"checkpoint module","text":"","category":"section"},{"location":"pysource/#*class*-checkpoint.CheckpointOperator(op,-**kwargs)","page":"Devito backend reference","title":"class checkpoint.CheckpointOperator(op, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Devito’s concrete implementation of the ABC pyrevolve.Operator. This class wraps devito.Operator so it conforms to the pyRevolve API. pyRevolve will call apply with arguments tstart and tend. Devito calls these arguments ts and te so the following dict is used to perform the translations between different names.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nop (Operator) – devito.Operator object that this object will wrap.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **args** (*dict*) – If devito.Operator.apply() expects any arguments, they can be provided\nhere to be cached. Any calls to CheckpointOperator.apply() will\nautomatically include these cached arguments in the call to the\nunderlying devito.Operator.apply().","category":"page"},{"location":"pysource/#apply(t*start,-t*end)","page":"Devito backend reference","title":"apply(tstart, tend)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"If the devito operator requires some extra arguments in the call to apply they can be stored in the args property of this object so pyRevolve calls pyRevolve.Operator.apply() without caring about these extra arguments while this method passes them on correctly to devito.Operator","category":"page"},{"location":"pysource/#t*arg*names(_-{'t*end':-'time*M',-'t*start':-'time*m'_-)","page":"Devito backend reference","title":"targnames(_ = {'tend': 'timeM', 'tstart': 'timem'_ )","text":"","category":"section"},{"location":"pysource/#*class*-checkpoint.DevitoCheckpoint(objects)","page":"Devito backend reference","title":"class checkpoint.DevitoCheckpoint(objects)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Devito’s concrete implementation of the Checkpoint abstract base class provided by pyRevolve. Holds a list of symbol objects that hold data.","category":"page"},{"location":"pysource/#*property*-dtype()","page":"Devito backend reference","title":"property dtype()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"data type","category":"page"},{"location":"pysource/#get_data(timestep)","page":"Devito backend reference","title":"get_data(timestep)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"returns the data (wavefield) for the time-step timestep","category":"page"},{"location":"pysource/#get*data*location(timestep)","page":"Devito backend reference","title":"getdatalocation(timestep)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"returns the data (wavefield) for the time-step timestep","category":"page"},{"location":"pysource/#load()","page":"Devito backend reference","title":"load()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"NotImplementedError","category":"page"},{"location":"pysource/#save()","page":"Devito backend reference","title":"save()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"NotImplementedError","category":"page"},{"location":"pysource/#*property*-size()","page":"Devito backend reference","title":"property size()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"The memory consumption of the data contained in a checkpoint.","category":"page"},{"location":"pysource/#checkpoint.get*symbol*data(symbol,-timestep)","page":"Devito backend reference","title":"checkpoint.getsymboldata(symbol, timestep)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return the symbol corresponding to the data at time-step timestep","category":"page"},{"location":"pysource/#geom_utils-module","page":"Devito backend reference","title":"geom_utils module","text":"","category":"section"},{"location":"pysource/#geom*utils.src*rec(model,-u,-src*coordsNone,-rec*coordsNone,-waveletNone,-fwTrue,-ntNone)","page":"Devito backend reference","title":"geomutils.srcrec(model, u, srccoords=None, reccoords=None, wavelet=None, fw=True, nt=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Generates the source injection and receiver interpolation. This function is fully abstracted and does not care whether this is a forward or adjoint wave-equation. The source is the source term of the equation The receiver is the measurment term","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Therefore, for the adjoint, this function has to be called as: srcrec(model, v, srccoords=rec_coords, …) because the data is the sources","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **tuple*) – Wavefield to inject into and read from\n\n\n* **src_coords** (*Array*) – Physical coordinates of the sources\n\n\n* **rec_coords** (*Array*) – Physical coordinates of the receivers\n\n\n* **wavelet** (*Array*) – Data for the source\n\n\n* **fw=True** – Whether the direction is forward or backward in time\n\n\n* **nt** (*int*) – Number of time steps","category":"page"},{"location":"pysource/#interface-module","page":"Devito backend reference","title":"interface module","text":"","category":"section"},{"location":"pysource/#interface.J*adjoint(model,-src*coords,-wavelet,-rec*coords,-recin,-space*order8,-is*residualFalse,-checkpointingFalse,-n*checkpointsNone,-t*sub1,-return*objFalse,-freq*list[],-dft*subNone,-isicFalse,-wsNone,-f00.015,-born_fwdFalse)","page":"Devito backend reference","title":"interface.Jadjoint(model, srccoords, wavelet, reccoords, recin, spaceorder=8, isresidual=False, checkpointing=False, ncheckpoints=None, tsub=1, returnobj=False, freqlist=[], dftsub=None, isic=False, ws=None, f0=0.015, born_fwd=False)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Jacobian (adjoint fo born modeling operator) operator on a shot record as a source (i.e data residual). Supports three modes: * Checkpinting * Frequency compression (on-the-fly DFT) * Standard zero lag cross correlation over time","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **recin** (*Array*) – Receiver data\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **checkpointing** (*Bool*) – Whether or not to use checkpointing\n\n\n* **n_checkpoints** (*Int*) – Number of checkpoints for checkpointing\n\n\n* **maxmem** (*Float*) – Maximum memory to use for checkpointing\n\n\n* **freq_list** (*List*) – List of frequencies for on-the-fly DFT\n\n\n* **dft_sub** (*Int*) – Subsampling factor for on-the-fly DFT\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **ws** (*Array*) – Extended source spatial distribution\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint jacobian on the input data (gradient)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.J*adjoint*checkpointing(model,-src*coords,-wavelet,-rec*coords,-recin,-space*order8,-is*residualFalse,-n*checkpointsNone,-born*fwdFalse,-return_objFalse,-isicFalse,-wsNone,-nlindFalse,-f00.015)","page":"Devito backend reference","title":"interface.Jadjointcheckpointing(model, srccoords, wavelet, reccoords, recin, spaceorder=8, isresidual=False, ncheckpoints=None, bornfwd=False, return_obj=False, isic=False, ws=None, nlind=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Jacobian (adjoint fo born modeling operator) operator on a shot record as a source (i.e data residual). Outputs the gradient with Checkpointing.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **recin** (*Array*) – Receiver data\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **checkpointing** (*Bool*) – Whether or not to use checkpointing\n\n\n* **n_checkpoints** (*Int*) – Number of checkpoints for checkpointing\n\n\n* **maxmem** (*Float*) – Maximum memory to use for checkpointing\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **ws** (*Array*) – Extended source spatial distribution\n\n\n* **is_residual** (*Bool*) – Whether to treat the input as the residual or as the observed data\n\n\n* **born_fwd** (*Bool*) – Whether to use the forward or linearized forward modeling operator\n\n\n* **nlind** (*Bool*) – Whether to remove the non linear data from the input data. This option is\nonly available in combination with born_fwd\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint jacobian on the input data (gradient)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.J*adjoint*freq(model,-src*coords,-wavelet,-rec*coords,-recin,-space*order8,-freq*list[],-is*residualFalse,-return*objFalse,-nlindFalse,-dft*subNone,-isicFalse,-wsNone,-born*fwdFalse,-f00.015)","page":"Devito backend reference","title":"interface.Jadjointfreq(model, srccoords, wavelet, reccoords, recin, spaceorder=8, freqlist=[], isresidual=False, returnobj=False, nlind=False, dftsub=None, isic=False, ws=None, bornfwd=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Jacobian (adjoint fo born modeling operator) operator on a shot record as a source (i.e data residual). Outputs the gradient with Frequency compression (on-the-fly DFT).","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **recin** (*Array*) – Receiver data\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **freq_list** (*List*) – List of frequencies for on-the-fly DFT\n\n\n* **dft_sub** (*Int*) – Subsampling factor for on-the-fly DFT\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **ws** (*Array*) – Extended source spatial distribution\n\n\n* **is_residual** (*Bool*) – Whether to treat the input as the residual or as the observed data\n\n\n* **born_fwd** (*Bool*) – Whether to use the forward or linearized forward modeling operator\n\n\n* **nlind** (*Bool*) – Whether to remove the non linear data from the input data. This option is\nonly available in combination with born_fwd\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint jacobian on the input data (gradient)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.J*adjoint*standard(model,-src*coords,-wavelet,-rec*coords,-recin,-space*order8,-is*residualFalse,-return*objFalse,-born*fwdFalse,-isicFalse,-wsNone,-t_sub1,-nlindFalse,-f00.015)","page":"Devito backend reference","title":"interface.Jadjointstandard(model, srccoords, wavelet, reccoords, recin, spaceorder=8, isresidual=False, returnobj=False, bornfwd=False, isic=False, ws=None, t_sub=1, nlind=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint Jacobian (adjoint fo born modeling operator) operator on a shot record as a source (i.e data residual). Outputs the gradient with standard zero lag cross correlation over time.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **recin** (*Array*) – Receiver data\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **ws** (*Array*) – Extended source spatial distribution\n\n\n* **is_residual** (*Bool*) – Whether to treat the input as the residual or as the observed data\n\n\n* **born_fwd** (*Bool*) – Whether to use the forward or linearized forward modeling operator\n\n\n* **nlind** (*Bool*) – Whether to remove the non linear data from the input data. This option is\nonly available in combination with born_fwd\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint jacobian on the input data (gradient)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.adjoint*no*rec(model,-rec*coords,-data,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.adjointnorec(model, reccoords, data, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint/backward modeling of a shot record (receivers as source) without source sampling F^T*Pr^T*d_obs.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **data** (*Array*) – Shot gather\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.adjoint*rec(model,-src*coords,-rec*coords,-data,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.adjointrec(model, srccoords, reccoords, data, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint/backward modeling of a shot record (receivers as source) Ps*F^T*Pr^T*d.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **data** (*Array*) – Shot gather\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record (adjoint wavefield at source position(s))","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.adjoint*w(model,-rec*coords,-data,-wavelet,-space_order8,-f00.015)","page":"Devito backend reference","title":"interface.adjointw(model, reccoords, data, wavelet, space_order=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint/backward modeling of a shot record (receivers as source) for an extended source setup Pw*F^T*Pr^T*d_obs.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **data** (*Array*) – Shot gather\n\n\n* **wavelet** (*Array*) – Time signature of the forward source for stacking along time\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nspatial distribution","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.adjoint*wf*src(model,-u,-src*coords,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.adjointwfsrc(model, u, srccoords, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint/backward modeling of a full wavefield (full wavefield as adjoint source) Ps*F^T*u.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*Array** or **TimeFunction*) – Time-space dependent source\n\n\n* **src_coords** (*Array*) – Source coordinates\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record (sampled at source position(s))","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.adjoint*wf*src*norec(model,-u,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.adjointwfsrcnorec(model, u, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint/backward modeling of a full wavefield (full wavefield as adjoint source) F^T*u.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*Array** or **TimeFunction*) – Time-space dependent source\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nAdjoint wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.born*rec(model,-src*coords,-wavelet,-rec*coords,-space*order8,-isicFalse,-f00.015)","page":"Devito backend reference","title":"interface.bornrec(model, srccoords, wavelet, reccoords, spaceorder=8, isic=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Linearized (Born) modeling of a point source for a model perturbation (square slowness) dm.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.born*rec*w(model,-weight,-wavelet,-rec*coords,-space*order8,-isicFalse,-f00.015)","page":"Devito backend reference","title":"interface.bornrecw(model, weight, wavelet, reccoords, spaceorder=8, isic=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Linearized (Born) modeling of an extended source for a model perturbation (square slowness) dm with an extended source","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **weight** (*Array*) – Spatial distriubtion of the extended source\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **isic** (*Bool*) – Whether or not to use ISIC imaging condition\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.forward*no*rec(model,-src*coords,-wavelet,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardnorec(model, srccoords, wavelet, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of a point source without receiver.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nWavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.forward*rec(model,-src*coords,-wavelet,-rec*coords,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardrec(model, srccoords, wavelet, reccoords, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of a point source with receivers Pr*F*Ps^T*q.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.forward*rec*w(model,-weight,-wavelet,-rec*coords,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardrecw(model, weight, wavelet, reccoords, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of an extended source with receivers  Pr*F*Pw^T*w","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **weights** (*Array*) – Spatial distribution of the extended source.\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.forward*rec*wf(model,-src*coords,-wavelet,-rec*coords,-t*sub1,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardrecwf(model, srccoords, wavelet, reccoords, tsub=1, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of a point source Pr*F*Ps^T*q and return wavefield.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **src_coords** (*Array*) – Coordiantes of the source(s)\n\n\n* **wavelet** (*Array*) – Source signature\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nArray – Shot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* *TimeFunction* – Wavefield","category":"page"},{"location":"pysource/#interface.forward*wf*src(model,-u,-rec*coords,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardwfsrc(model, u, reccoords, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of a full wavefield source Pr*F*u.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **Array*) – Time-space dependent wavefield\n\n\n* **rec_coords** (*Array*) – Coordiantes of the receiver(s)\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nShot record","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.forward*wf*src*norec(model,-u,-space*order8,-f00.015)","page":"Devito backend reference","title":"interface.forwardwfsrcnorec(model, u, spaceorder=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Forward modeling of a full wavefield source without receiver F*u.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **Array*) – Time-space dependent wavefield\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nWavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.grad*fwi(model,-recin,-rec*coords,-u,-space_order8,-f00.015)","page":"Devito backend reference","title":"interface.gradfwi(model, recin, reccoords, u, space_order=8, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"FWI gradient, i.e adjoint Jacobian on a data residual.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **recin** (*Array*) – Data residual\n\n\n* **rec_coords** (*Array*) – Receivers coordinates\n\n\n* **u** (*TimeFunction*) – Forward wavefield\n\n\n* **space_order** (*Int** (**optional**)*) – Spatial discretization order, defaults to 8\n\n\n* **f0** (*peak frequency*) –","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Returns\nFWI gradient","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Return type\nArray","category":"page"},{"location":"pysource/#interface.wri*func(model,-src*coords,-wavelet,-rec*coords,-recin,-yin,-space*order8,-isicFalse,-wsNone,-t*sub1,-grad'm',-grad*corrFalse,-alpha*opFalse,-w*funNone,-eps0,-freq_list[],-wfiltNone,-f00.015)","page":"Devito backend reference","title":"interface.wrifunc(model, srccoords, wavelet, reccoords, recin, yin, spaceorder=8, isic=False, ws=None, tsub=1, grad='m', gradcorr=False, alphaop=False, wfun=None, eps=0, freq_list=[], wfilt=None, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Time domain wavefield reconstruction inversion wrapper","category":"page"},{"location":"pysource/#kernels-module","page":"Devito backend reference","title":"kernels module","text":"","category":"section"},{"location":"pysource/#kernels.SLS*2nd*order(model,-p,-fwTrue,-qNone,-f00.015)","page":"Devito backend reference","title":"kernels.SLS2ndorder(model, p, fw=True, q=None, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Viscoacoustic 2nd SLS wave equation. https://library.seg.org/doi/10.1190/geo2013-0030.1","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Bulk modulus moved to rhs. The adjoint equation is directly derived as the discrete adjoint of the forward PDE which leads to a slightly different formulation than in the paper.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u1** (*TimeFunction*) – Pressure field\n\n\n* **u2** (*TimeFunction*) – Attenuation Memory variable\n\n\n* **fw** (*Bool*) – Whether forward or backward in time propagation\n\n\n* **q** (*TimeFunction** or **Expr*) – Full time-space source as a tuple (one value for each component)\n\n\n* **f0** (*Peak frequency*) –","category":"page"},{"location":"pysource/#kernels.acoustic_kernel(model,-u,-fwTrue,-qNone)","page":"Devito backend reference","title":"kernels.acoustic_kernel(model, u, fw=True, q=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Acoustic wave equation time stepper","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **tuple*) – wavefield (tuple if TTI)\n\n\n* **fw** (*Bool*) – Whether forward or backward in time propagation\n\n\n* **q** (*TimeFunction** or **Expr*) – Full time-space source","category":"page"},{"location":"pysource/#kernels.tti_kernel(model,-u1,-u2,-fwTrue,-qNone)","page":"Devito backend reference","title":"kernels.tti_kernel(model, u1, u2, fw=True, q=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"TTI wave equation (one from my paper) time stepper","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u1** (*TimeFunction*) – First component (pseudo-P) of the wavefield\n\n\n* **u2** (*TimeFunction*) – First component (pseudo-P) of the wavefield\n\n\n* **fw** (*Bool*) – Whether forward or backward in time propagation\n\n\n* **q** (*TimeFunction** or **Expr*) – Full time-space source as a tuple (one value for each component)","category":"page"},{"location":"pysource/#kernels.wave_kernel(model,-u,-fwTrue,-qNone,-f00.015)","page":"Devito backend reference","title":"kernels.wave_kernel(model, u, fw=True, q=None, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Pde kernel corresponding the the model for the input wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **tuple*) – wavefield (tuple if TTI or Viscoacoustic)\n\n\n* **fw** (*Bool*) – Whether forward or backward in time propagation\n\n\n* **q** (*TimeFunction** or **Expr*) – Full time-space source\n\n\n* **f0** (*Peak frequency*) –","category":"page"},{"location":"pysource/#models-module","page":"Devito backend reference","title":"models module","text":"","category":"section"},{"location":"pysource/#*class*-models.Model(origin,-spacing,-shape,-m,-space_order2,-nbl40,-dtypeclass-'numpy.float32',-epsilonNone,-deltaNone,-thetaNone,-phiNone,-rho1,-qpNone,-dmNone,-fsFalse,-**kwargs)","page":"Devito backend reference","title":"class models.Model(origin, spacing, shape, m, space_order=2, nbl=40, dtype=<class 'numpy.float32'>, epsilon=None, delta=None, theta=None, phi=None, rho=1, qp=None, dm=None, fs=False, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"The physical model used in seismic inversion processes.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\norigin (tuple of floats) – Origin of the model in m as a tuple in (x,y,z) order.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **spacing** (*tuple of floats*) – Grid size in m as a Tuple in (x,y,z) order.\n\n\n* **shape** (*tuple of int*) – Number of grid points size in (x,y,z) order.\n\n\n* **space_order** (*int*) – Order of the spatial stencil discretisation.\n\n\n* **m** (*array_like** or **float*) – Squared slownes in s^2/km^2\n\n\n* **nbl** (*int**, **optional*) – The number of absorbin layers for boundary damping.\n\n\n* **dtype** (*np.float32** or **np.float64*) – Defaults to 32.\n\n\n* **epsilon** (*array_like** or **float**, **optional*) – Thomsen epsilon parameter (0<epsilon<1).\n\n\n* **delta** (*array_like** or **float*) – Thomsen delta parameter (0<delta<1), delta<epsilon.\n\n\n* **theta** (*array_like** or **float*) – Tilt angle in radian.\n\n\n* **phi** (*array_like** or **float*) – Asymuth angle in radian.\n\n\n* **dt** (*Float*) – User provided computational time-step","category":"page"},{"location":"pysource/#*property*-critical_dt()","page":"Devito backend reference","title":"property critical_dt()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Critical computational time step value from the CFL condition.","category":"page"},{"location":"pysource/#*property*-dm()","page":"Devito backend reference","title":"property dm()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Model perturbation for linearized modeling","category":"page"},{"location":"pysource/#*property*-dt()","page":"Devito backend reference","title":"property dt()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"User provided dt","category":"page"},{"location":"pysource/#*property*-is_tti()","page":"Devito backend reference","title":"property is_tti()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Whether the model is TTI or isotopic","category":"page"},{"location":"pysource/#*property*-is_viscoacoustic()","page":"Devito backend reference","title":"property is_viscoacoustic()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Whether the model is TTI or isotopic","category":"page"},{"location":"pysource/#*property*-m()","page":"Devito backend reference","title":"property m()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Function holding the squared slowness in s^2/km^2.","category":"page"},{"location":"pysource/#*property*-space_order()","page":"Devito backend reference","title":"property space_order()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Spatial discretization order","category":"page"},{"location":"pysource/#*property*-spacing_map()","page":"Devito backend reference","title":"property spacing_map()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Map between spacing symbols and their values for each SpaceDimension.","category":"page"},{"location":"pysource/#*property*-vp()","page":"Devito backend reference","title":"property vp()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Symbolic representation of the velocity vp = sqrt(1 / m)","category":"page"},{"location":"pysource/#propagators-module","page":"Devito backend reference","title":"propagators module","text":"","category":"section"},{"location":"pysource/#propagators.adjoint(model,-y,-src*coords,-rcv*coords,-space*order8,-q0,-dft*subNone,-saveFalse,-wsNone,-norm*vFalse,-w*funNone,-freq_listNone,-f00.015)","page":"Devito backend reference","title":"propagators.adjoint(model, y, srccoords, rcvcoords, spaceorder=8, q=0, dftsub=None, save=False, ws=None, normv=False, wfun=None, freq_list=None, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Low level propagator, to be used through interface.py Compute adjoint wavefield v = adjoint(F(m))*y and related quantities (||v||_w, v(xsrc))","category":"page"},{"location":"pysource/#propagators.born(model,-src*coords,-rcv*coords,-wavelet,-space*order8,-saveFalse,-qNone,-return*opFalse,-isicFalse,-freq*listNone,-dft*subNone,-wsNone,-t_sub1,-nlindFalse,-f00.015)","page":"Devito backend reference","title":"propagators.born(model, srccoords, rcvcoords, wavelet, spaceorder=8, save=False, q=None, returnop=False, isic=False, freqlist=None, dftsub=None, ws=None, t_sub=1, nlind=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Low level propagator, to be used through interface.py Compute linearized wavefield U = J(m)* δ m and related quantities.","category":"page"},{"location":"pysource/#propagators.forward(model,-src*coords,-rcv*coords,-wavelet,-space*order8,-saveFalse,-qNone,-return*opFalse,-freq*listNone,-dft*subNone,-wsNone,-t_sub1,-f00.015,-**kwargs)","page":"Devito backend reference","title":"propagators.forward(model, srccoords, rcvcoords, wavelet, spaceorder=8, save=False, q=None, returnop=False, freqlist=None, dftsub=None, ws=None, t_sub=1, f0=0.015, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Low level propagator, to be used through interface.py Compute forward wavefield u = A(m)^{-1}*f and related quantities (u(xrcv))","category":"page"},{"location":"pysource/#propagators.forward*grad(model,-src*coords,-rcv*coords,-wavelet,-v,-space*order8,-qNone,-wsNone,-isicFalse,-wNone,-freqNone,-f00.015,-**kwargs)","page":"Devito backend reference","title":"propagators.forwardgrad(model, srccoords, rcvcoords, wavelet, v, spaceorder=8, q=None, ws=None, isic=False, w=None, freq=None, f0=0.015, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Low level propagator, to be used through interface.py Compute forward wavefield u = A(m)^{-1}*f and related quantities (u(xrcv))","category":"page"},{"location":"pysource/#propagators.gradient(model,-residual,-rcv*coords,-u,-return*opFalse,-space*order8,-wNone,-freqNone,-dft*subNone,-isicFalse,-f00.015)","page":"Devito backend reference","title":"propagators.gradient(model, residual, rcvcoords, u, returnop=False, spaceorder=8, w=None, freq=None, dftsub=None, isic=False, f0=0.015)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Low level propagator, to be used through interface.py Compute the action of the adjoint Jacobian onto a residual J’* δ d.","category":"page"},{"location":"pysource/#propagators.name(model)","page":"Devito backend reference","title":"propagators.name(model)","text":"","category":"section"},{"location":"pysource/#sensitivity-module","page":"Devito backend reference","title":"sensitivity module","text":"","category":"section"},{"location":"pysource/#sensitivity.basic_src(model,-u,-**kwargs)","page":"Devito backend reference","title":"sensitivity.basic_src(model, u, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Basic source for linearized modeling","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **model** (*Model*) – Model containing the perturbation dm","category":"page"},{"location":"pysource/#sensitivity.crosscorr*freq(u,-v,-model,-freqNone,-dft*subNone,-**kwargs)","page":"Devito backend reference","title":"sensitivity.crosscorrfreq(u, v, model, freq=None, dftsub=None, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Standard cross-correlation imaging condition with on-th-fly-dft","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Tuple*) – Adjoint wavefield (tuple of fields for TTI)\n\n\n* **model** (*Model*) – Model structure\n\n\n* **freq** (*Array*) – Array of frequencies for on-the-fly DFT\n\n\n* **factor** (*int*) – Subsampling factor for DFT","category":"page"},{"location":"pysource/#sensitivity.crosscorr_time(u,-v,-model,-**kwargs)","page":"Devito backend reference","title":"sensitivity.crosscorr_time(u, v, model, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Cross correlation of forward and adjoint wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Tuple*) – Adjoint wavefield (tuple of fields for TTI)\n\n\n* **model** (*Model*) – Model structure","category":"page"},{"location":"pysource/#sensitivity.func_name(freqNone,-isicFalse)","page":"Devito backend reference","title":"sensitivity.func_name(freq=None, isic=False)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Get key for imaging condition/linearized source function","category":"page"},{"location":"pysource/#sensitivity.grad*expr(gradm,-u,-v,-model,-wNone,-freqNone,-dft*subNone,-isicFalse)","page":"Devito backend reference","title":"sensitivity.gradexpr(gradm, u, v, model, w=None, freq=None, dftsub=None, isic=False)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Gradient update stencil","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Tuple*) – Adjoint wavefield (tuple of fields for TTI)\n\n\n* **model** (*Model*) – Model structure\n\n\n* **w** (*Float** or **Expr** (**optional**)*) – Weight for the gradient expression (default=1)\n\n\n* **freq** (*Array*) – Array of frequencies for on-the-fly DFT\n\n\n* **factor** (*int*) – Subsampling factor for DFT\n\n\n* **isic** (*Bool*) – Whether or not to use inverse scattering imaging condition (not supported yet)","category":"page"},{"location":"pysource/#sensitivity.inner_grad(u,-v)","page":"Devito backend reference","title":"sensitivity.inner_grad(u, v)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Inner product of the gradient of two Function.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Function) – First wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Function*) – Second wavefield","category":"page"},{"location":"pysource/#sensitivity.isic_freq(u,-v,-model,-**kwargs)","page":"Devito backend reference","title":"sensitivity.isic_freq(u, v, model, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Inverse scattering imaging condition","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Tuple*) – Adjoint wavefield (tuple of fields for TTI)\n\n\n* **model** (*Model*) – Model structure","category":"page"},{"location":"pysource/#sensitivity.isic_src(model,-u,-**kwargs)","page":"Devito backend reference","title":"sensitivity.isic_src(model, u, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"ISIC source for linearized modeling","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **model** (*Model*) – Model containing the perturbation dm","category":"page"},{"location":"pysource/#sensitivity.isic_time(u,-v,-model,-**kwargs)","page":"Devito backend reference","title":"sensitivity.isic_time(u, v, model, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Inverse scattering imaging condition","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **v** (*TimeFunction** or **Tuple*) – Adjoint wavefield (tuple of fields for TTI)\n\n\n* **model** (*Model*) – Model structure","category":"page"},{"location":"pysource/#sensitivity.l2*loss(dsyn,-dobs,-dt,-is*residualFalse)","page":"Devito backend reference","title":"sensitivity.l2loss(dsyn, dobs, dt, isresidual=False)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"L2 loss and residual between the synthetic data dsyn and observed data dobs","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\ndsyn (SparseTimeFunction** or **tuple) – Synthetic data or tuple (background, linearized) data","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **dobs** (*SparseTimeFunction*) – Observed data\n\n\n* **dt** (*float*) – Time sampling rate\n\n\n* **is_residual** (*bool*) – Whether input dobs is already the data residual","category":"page"},{"location":"pysource/#sensitivity.lin_src(model,-u,-isicFalse)","page":"Devito backend reference","title":"sensitivity.lin_src(model, u, isic=False)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Source for linearized modeling","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple) – Forward wavefield (tuple of fields for TTI or dft)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **model** (*Model*) – Model containing the perturbation dm","category":"page"},{"location":"pysource/#sources-module","page":"Devito backend reference","title":"sources module","text":"","category":"section"},{"location":"pysource/#*class*-sources.PointSource(*args,-**kwargs)","page":"Devito backend reference","title":"class sources.PointSource(*args, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Symbolic data object for a set of sparse point sources","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nname (String) – Name of the symbol representing this source","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **grid** (*Grid*) – Grid object defining the computational domain.\n\n\n* **coordinates** (*Array*) – Point coordinates for this source\n\n\n* **data** (*(**Optional**) **Data*) – values to initialise point data\n\n\n* **ntime** (*Int** (**Optional**)*) – Number of timesteps for which to allocate data\n\n\n* **npoint** (*Int** (**Optional**)*) – \n\n\n* **of sparse points represented by this source** (*Number*) – \n\n\n* **dimension** (*Dimension** (**Optional**)*) – object for representing the number of points in this source\n\n\n* **either the dimensions ntime and npoint**** or ****the fully** (*Note**,*) – \n\n\n* **data array need to be provided.** (*initialised*) –","category":"page"},{"location":"pysource/#default*assumptions(*-{'commutative':-True,-'complex':-True,-'extended*real':-True,-'finite':-True,-'hermitian':-True,-'imaginary':-False,-'infinite':-False,-'real':-True*-)","page":"Devito backend reference","title":"defaultassumptions( = {'commutative': True, 'complex': True, 'extendedreal': True, 'finite': True, 'hermitian': True, 'imaginary': False, 'infinite': False, 'real': True )","text":"","category":"section"},{"location":"pysource/#is*commutative(*-Tru_-)","page":"Devito backend reference","title":"iscommutative( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*complex(*-Tru_-)","page":"Devito backend reference","title":"iscomplex( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*extended*real(_-Tru_-)","page":"Devito backend reference","title":"isextendedreal(_ = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*finite(*-Tru_-)","page":"Devito backend reference","title":"isfinite( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*hermitian(*-Tru_-)","page":"Devito backend reference","title":"ishermitian( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*imaginary(*-Fals_-)","page":"Devito backend reference","title":"isimaginary( = Fals_ )","text":"","category":"section"},{"location":"pysource/#is*infinite(*-Fals_-)","page":"Devito backend reference","title":"isinfinite( = Fals_ )","text":"","category":"section"},{"location":"pysource/#is*real(*-Tru_-)","page":"Devito backend reference","title":"isreal( = Tru_ )","text":"","category":"section"},{"location":"pysource/#sources.Receiver()","page":"Devito backend reference","title":"sources.Receiver()","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"alias of sources.PointSource","category":"page"},{"location":"pysource/#*class*-sources.RickerSource(*args,-**kwargs)","page":"Devito backend reference","title":"class sources.RickerSource(*args, **kwargs)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Symbolic object that encapsulate a set of sources with a pre-defined Ricker wavelet: http://subsurfwiki.org/wiki/Ricker_wavelet name: Name for the resulting symbol grid: Grid object defining the computational domain. f0: Peak frequency for Ricker wavelet in kHz time: Discretized values of time in ms","category":"page"},{"location":"pysource/#default*assumptions(*-{'commutative':-True,-'complex':-True,-'extended*real':-True,-'finite':-True,-'hermitian':-True,-'imaginary':-False,-'infinite':-False,-'real':-True*-)-2","page":"Devito backend reference","title":"defaultassumptions( = {'commutative': True, 'complex': True, 'extendedreal': True, 'finite': True, 'hermitian': True, 'imaginary': False, 'infinite': False, 'real': True )","text":"","category":"section"},{"location":"pysource/#is*commutative(*-Tru_-)-2","page":"Devito backend reference","title":"iscommutative( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*complex(*-Tru_-)-2","page":"Devito backend reference","title":"iscomplex( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*extended*real(_-Tru_-)-2","page":"Devito backend reference","title":"isextendedreal(_ = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*finite(*-Tru_-)-2","page":"Devito backend reference","title":"isfinite( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*hermitian(*-Tru_-)-2","page":"Devito backend reference","title":"ishermitian( = Tru_ )","text":"","category":"section"},{"location":"pysource/#is*imaginary(*-Fals_-)-2","page":"Devito backend reference","title":"isimaginary( = Fals_ )","text":"","category":"section"},{"location":"pysource/#is*infinite(*-Fals_-)-2","page":"Devito backend reference","title":"isinfinite( = Fals_ )","text":"","category":"section"},{"location":"pysource/#is*real(*-Tru_-)-2","page":"Devito backend reference","title":"isreal( = Tru_ )","text":"","category":"section"},{"location":"pysource/#wavelet(timev)","page":"Devito backend reference","title":"wavelet(timev)","text":"","category":"section"},{"location":"pysource/#*class*-sources.TimeAxis(startNone,-stepNone,-numNone,-stopNone)","page":"Devito backend reference","title":"class sources.TimeAxis(start=None, step=None, num=None, stop=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Data object to store the TimeAxis. Exactly three of the four key arguments must be prescribed. Because of remainder values it is not possible to create a TimeAxis that exactly adhears to the inputs therefore start, stop, step and num values should be taken from the TimeAxis object rather than relying upon the input values. The four possible cases are: * start is None: start = step*(1 - num) + stop * step is None: step = (stop - start)/(num - 1) * num is None: num = ceil((stop - start + step)/step) and because of remainder stop = step*(num - 1) + start * stop is None: stop = step*(num - 1) + start","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nstart (float**, **optional) – Start of time axis.","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **step** (*float**, **optional*) – Time interval.\n\n\n* **num** (*int**, **optional*) – Number of values (Note: this is the number of intervals + 1).\nStop value is reset to correct for remainder.\n\n\n* **stop** (*float**, **optional*) – End time.","category":"page"},{"location":"pysource/#time_values()","page":"Devito backend reference","title":"time_values()","text":"","category":"section"},{"location":"pysource/#wave_utils-module","page":"Devito backend reference","title":"wave_utils module","text":"","category":"section"},{"location":"pysource/#wave*utils.extended*src_weights(model,-wavelet,-v)","page":"Devito backend reference","title":"waveutils.extendedsrc_weights(model, wavelet, v)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Adjoint of extended source. This function returns the expression to obtain the spatially varrying weights from the wavefield and time-dependent wavelet","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model structure","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **wavelet** (*Array*) – Time-serie for the time-varying source\n\n\n* **v** (*TimeFunction*) – Wavefield to get the weights from","category":"page"},{"location":"pysource/#wave*utils.extented*src(model,-weight,-wavelet,-q0)","page":"Devito backend reference","title":"waveutils.extentedsrc(model, weight, wavelet, q=0)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Extended source for modelling where the source is the outer product of a spatially varying weight and a time-dependent wavelet i.e.: u.dt2 - u.laplace = w(x)*q(t) This function returns the extended source w(x)*q(t)","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model structure","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **weight** (*Array*) – Array of weight for the spatial Function\n\n\n* **wavelet** (*Array*) – Time-serie for the time-varying source\n\n\n* **q** (*Symbol** or **Expr** (**optional**)*) – Previously existing source to be added to (source will be q +  w(x)\\*q(t))","category":"page"},{"location":"pysource/#wave_utils.freesurface(model,-eq)","page":"Devito backend reference","title":"wave_utils.freesurface(model, eq)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Generate the stencil that mirrors the field as a free surface modeling for the acoustic wave equation","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **eq** (*Eq** or **List of Eq*) – Equation to apply mirror to","category":"page"},{"location":"pysource/#wave_utils.idft(v,-freqNone)","page":"Devito backend reference","title":"wave_utils.idft(v, freq=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Symbolic inverse dft of v","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nv (TimeFunction** or **Tuple) – Wavefield to take inverse DFT of","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **freq** (*Array*) – Array of frequencies for on-the-fly DFT","category":"page"},{"location":"pysource/#wave*utils.otf*dft(u,-freq,-dt,-factorNone)","page":"Devito backend reference","title":"waveutils.otfdft(u, freq, dt, factor=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"On the fly DFT wavefield (frequency slices) and expression","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **Tuple*) – Forward wavefield\n\n\n* **freq** (*Array*) – Array of frequencies for on-the-fly DFT\n\n\n* **factor** (*int*) – Subsampling factor for DFT","category":"page"},{"location":"pysource/#wave*utils.sub*time(time,-factor,-dt1,-freqNone)","page":"Devito backend reference","title":"waveutils.subtime(time, factor, dt=1, freq=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Subsampled  time axis","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\ntime (Dimension) – time Dimension","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **factor** (*int*) – Subsampling factor","category":"page"},{"location":"pysource/#wave*utils.wavefield(model,-space*order,-saveFalse,-ntNone,-fwTrue,-name'',-t_sub1)","page":"Devito backend reference","title":"waveutils.wavefield(model, spaceorder, save=False, nt=None, fw=True, name='', t_sub=1)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Create the wavefield for the wave equation","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **space_order** (*int*) – Spatial discretization order\n\n\n* **save** (*Bool*) – Whether or not to save the time history\n\n\n* **nt** (*int** (**optional**)*) – Number of time steps if the wavefield is saved\n\n\n* **fw** (*Bool*) – Forward or backward (for naming)\n\n\n* **name** (*string*) – Custom name attached to default (u+name)","category":"page"},{"location":"pysource/#wave*utils.wavefield*subsampled(model,-u,-nt,-t*sub,-space*order8)","page":"Devito backend reference","title":"waveutils.wavefieldsubsampled(model, u, nt, tsub, spaceorder=8)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Create a subsampled wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction*) – Forward wavefield for modeling\n\n\n* **nt** (*int*) – Number of time steps on original time axis\n\n\n* **t_sub** (*int*) – Factor for time-subsampling\n\n\n* **space_order** (*int*) – Spatial discretization order","category":"page"},{"location":"pysource/#wave*utils.weighted*norm(u,-weightNone)","page":"Devito backend reference","title":"waveutils.weightednorm(u, weight=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Space-time norm of a wavefield, split into norm in time first then in space to avoid breaking loops","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nu (TimeFunction** or **Tuple of TimeFunction) – Wavefield to take the norm of","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **weight** (*String*) – Spacial weight to apply","category":"page"},{"location":"pysource/#wave*utils.wf*as*src(v,-w1,-freq*listNone)","page":"Devito backend reference","title":"waveutils.wfassrc(v, w=1, freqlist=None)","text":"","category":"section"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Weighted source as a time-space wavefield","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"Parameters\nmodel (Model) – Physical model structure","category":"page"},{"location":"pysource/","page":"Devito backend reference","title":"Devito backend reference","text":"* **u** (*TimeFunction** or **Tuple*) – Forward wavefield (tuple of fields for TTI or dft)\n\n\n* **w** (*Float** or **Expr** (**optional**)*) – Weight for the source expression (default=1)","category":"page"},{"location":"pysource/#Module-contents","page":"Devito backend reference","title":"Module contents","text":"","category":"section"},{"location":"linear_operators/#Linear-Operators","page":"Linear Operators","title":"Linear Operators","text":"","category":"section"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"JUDI is building on JOLI.jl to implement matrix-free linear operators. These operators represent the discretized wave-equations and sensitivit (Jacobian) for different acquisition schemes. ","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Pages = [\"linear_operators.md\"]","category":"page"},{"location":"linear_operators/#judiModeling","page":"Linear Operators","title":"judiModeling","text":"","category":"section"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Seismic modeling operator for solving a wave equation for a given right-hand-side.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"judiModeling{DDT, RDT}","category":"page"},{"location":"linear_operators/#JUDI.judiModeling","page":"Linear Operators","title":"JUDI.judiModeling","text":"judiModeling(info, model; options=Options())\njudiModeling(model, src_geometry, rec_geometry; options=Options())\njudiModeling(info, model, src_geometry, rec_geometry; options=Options())\n\nCreate seismic modeling operator for a velocity model given as a Model structure. info is an Info structure\ncontaining necessary dimensions to set up the operator. The function also takes the source and receiver geometries\nas additional input arguments, which creates a combined operator judiProjection*judiModeling*judiProjection'.\n\nExample\n\nPr and Ps are projection operatos of type judiProjection and\nq is a data vector of type judiVector:\n\nF = judiModeling(info, model)\ndobs = Pr*F*Ps'*q\n\nF = judiModeling(info, model, q.geometry, rec_geometry)\ndobs = F*q\n\n\n\n\n\n","category":"type"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construction:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construct a modeling operator without source/receiver projections:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"F = judiModeling(info, model; options=opt)","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construct a modeling operator with source/receiver projections:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"F = judiModeling(info, model, src_geometry, rec_geometry)","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Not that in this case, all the information can be infered from the model and geometries. Therefore the operator can be created without the need for the info input:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"F = judiModeling(model, src_geometry, rec_geometry)","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construct a modeling operator from an existing operator without geometries and projection operators:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"F = Pr*F*Ps'","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"where Ps and Pr are source/receiver projection operators of type judiProjection.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construct a modeling operator for extended source modeling:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"F = Pr*F*Pw'","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"where Pw is a judiLRWF (low-rank-wavefield) projection operator.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"judiModeling(info::Info, model::Model; options=Options(), DDT::DataType=Float32, RDT::DataType=DDT)","category":"page"},{"location":"linear_operators/#JUDI.judiModeling-Tuple{Info, Model}","page":"Linear Operators","title":"JUDI.judiModeling","text":"judiModeling(info, model; options=Options())\njudiModeling(model, src_geometry, rec_geometry; options=Options())\njudiModeling(info, model, src_geometry, rec_geometry; options=Options())\n\nCreate seismic modeling operator for a velocity model given as a Model structure. info is an Info structure\ncontaining necessary dimensions to set up the operator. The function also takes the source and receiver geometries\nas additional input arguments, which creates a combined operator judiProjection*judiModeling*judiProjection'.\n\nExample\n\nPr and Ps are projection operatos of type judiProjection and\nq is a data vector of type judiVector:\n\nF = judiModeling(info, model)\ndobs = Pr*F*Ps'*q\n\nF = judiModeling(info, model, q.geometry, rec_geometry)\ndobs = F*q\n\n\n\n\n\n","category":"method"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Accessible fields:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Info structure\nF.info\n\n# Model structure\nF.model\n\n# Source geometry (if available)\nF.srcGeometry\n\n# Receiver geometry (if available)\nF.recGeometry\n\n# Options structure\nF.options","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Usage:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Forward modeling (F w/ geometries)\nd_obs = F*q\n\n# Adjoint modeling (F w/ geometries)\nq_ad = F'*d_obs\n\n# Forward modeling (F w/o geometries)\nd_obs = Pr*F*Ps'*q\n\n# Adjoint modelng (F w/o geometries)\nq_ad = Ps*F'*Pr'*d_obs\n\n# Extended source modeling (F w/o geometries)\nd_obs  = Pr*F*Pw'*w\n\n# Adjoint extended source modeling (F w/o geometries)\nw_ad = Pw*F'*Pr'*d_obs\n\n# Forward modeling and return full wavefield (F w/o geometries)\nu = F*Ps'*q\n\n# Adjoint modelnig and return wavefield (F w/o geometries)\nv = F'*Pr'*d_obs\n\n# Forward modeling with full wavefield as source (F w/o geometries)\nd_obs = Pr*F*u\n\n# Adjoint modeling with full wavefield as source (F w/o geometries)\nq_ad = Ps*F*v","category":"page"},{"location":"linear_operators/#judiJacobian","page":"Linear Operators","title":"judiJacobian","text":"","category":"section"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Jacobian of a non-linear forward modeling operator. Corresponds to linearized Born modeling (forward mode) and reverse-time migration (adjoint mode).","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"judiJacobian","category":"page"},{"location":"linear_operators/#JUDI.judiJacobian","page":"Linear Operators","title":"JUDI.judiJacobian","text":"judiJacobian(F,q)\n\nCreate a linearized modeling operator from the non-linear modeling operator F and \nthe source q. F is a full modeling operator including source/receiver projections.\n\nExamples\n\nF is a modeling operator without source/receiver projections:\nJ = judiJacobian(PrFPs',q)\nF is the combined operator Pr*F*Ps':\nJ = judiJacobian(F,q)\n\n\n\n\n\njudiJacobianExQ(F,q)\n\nCreate a linearized modeling operator from the non-linear modeling operator F and \nthe source q. F is a full modeling operator including source/receiver projections. Examples ========\n\nF is a modeling operator without source/receiver projections:  J = judiJacobianExQ(PrFPs',q)\nF is the combined operator Pr*F*Ps':  J = judiJacobianExQ(F,q)\n\n\n\n\n\n","category":"type"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Construction:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"A judiJacobian operator can be create from an exisiting forward modeling operator and a source vector:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"J = judiJacobian(F, q)  # F w/ geometries","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"J = judiJacobian(Pr*F*Ps', q)   # F w/o geometries","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"where Ps and Pr are source/receiver projection operators of type judiProjection.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"A Jacobian can also be created for an extended source modeling operator:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"J = judiJacobian(Pr*F*Pw', w)","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"where Pw is a judiLRWF operator and w is a judiWeights vector (or 2D/3D Julia array).","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Accessible fields::","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Info structure\nJ.info\n\n# Model structure\nJ.model\n\n# Source geometry (if available)\nJ.srcGeometry\n\n# Receiver geometry\nJ.recGeometry\n\n# Source wavelet\nJ.wavelet\n\n# Weights (extended source modeling only)\nJ.weights\n\n# Options structure\nJ.options","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Usage:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Linearized modeilng\nd_lin = J*dm\n\n# RTM\nrtm = J'*d_lin\n\n# Matrix-free normal operator\nH = J'*J","category":"page"},{"location":"linear_operators/#judiProjection","page":"Linear Operators","title":"judiProjection","text":"","category":"section"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Abstract linear operator for source/receiver projections. A (transposed) judiProjection operator symbolically injects the data with which it is multiplied during modeling. If multiplied with a forward modeling operator, it samples the wavefield at the specified source/receiver locations.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"judiProjection","category":"page"},{"location":"linear_operators/#JUDI.judiProjection","page":"Linear Operators","title":"JUDI.judiProjection","text":"judiProjection(info, geometry)\n\nProjection operator for sources/receivers to restrict or inject data at specified locations.\ninfo is an Info structure and geometry is a Geometry structure with either source or\nreceiver locations.\n\nExamples\n\nF is a modeling operator of type judiModeling and q is a seismic source of type judiVector:\n\nPr = judiProjection(info, rec_geometry)\nPs = judiProjection(info, q.geometry)\n\ndobs = Pr*F*Ps'*q\nqad = Ps*F'*Pr'*dobs\n\n\n\n\n\n","category":"type"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Accessible fields:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Info structure\nP.info\n\n# Source/receiver geometry\nP.geometry","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Usage:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Multiply with judiVector to create a judiRHS\nrhs1 = Pr'*d_obs\nrhs2 = Ps'*q\n\n# Sample wavefield at source/receiver location during modeling\nd_obs = Pr*F*Ps'*q\nq_ad = Ps*F*Pr'*d_obs","category":"page"},{"location":"linear_operators/#judiLRWF","page":"Linear Operators","title":"judiLRWF","text":"","category":"section"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Abstract linear operator for sampling a seismic wavefield as a sum over all time steps, weighted by a time-varying wavelet. Its transpose injects a time-varying wavelet at every grid point in the model.","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"judiLRWF","category":"page"},{"location":"linear_operators/#JUDI.judiLRWF","page":"Linear Operators","title":"JUDI.judiLRWF","text":"judiLRWF(info, geometry)\n\nLow-rank wavefield operator which injects a wavelet q at every point of the subsurface. \ninfo is an Info structure and wavelet is a cell array containing the wavelet(s). Examples ======== F is a modeling operator of type judiModeling and w is a weighting matrix of type judiWeights:     Pr = judiProjection(info, rec_geometry)     Pw = judiLRWF(info, q.data)     dobs = PrFPw'w     dw = PwF'Pr'dobs\n\n\n\n\n\n","category":"type"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Accessible fields:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Info structure\nP.info\n\n# Wavelet of i-th source location\nP.wavelet[i]","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"Usage:","category":"page"},{"location":"linear_operators/","page":"Linear Operators","title":"Linear Operators","text":"# Multiply with a judiWeight vector to create a judiExtendedSource\nex_src = Pw'*w\n\n# Sample wavefield as a sum over time, weighted by the source\nu_ex = Pw*F'*Pr'*d_obs","category":"page"},{"location":"inversion/#Seismic-Inversion","page":"Inversion","title":"Seismic Inversion","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"Pages = [\"inversion.md\"]","category":"page"},{"location":"inversion/#Introduction","page":"Inversion","title":"Introduction","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"We currently introduced the lineaar operators that allow to write seismic modeling and inversion in a high-level, linear algebra way. These linear operator allow the script to closely follow the mathematics and to be readable and understandable.","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"However, these come with overhead. In particular, consider the following compuation on the FWI gradient:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"\nd_syn = F*q\nr = judiJacobian(F, q)' * (d_syn - d_obs)","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"In this two lines, the forward modeling is performed twice: once to compute d_syn then once again to compute the Jacobian adjoint. In order to avoid this overhead for practical inversion, we provide utility function that directly comput the gradient and objective function (L2- misfit) of FWI, LSRTM and TWRI with minimum overhead.","category":"page"},{"location":"inversion/#FWI","page":"Inversion","title":"FWI","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"fwi_objective","category":"page"},{"location":"inversion/#JUDI.fwi_objective","page":"Inversion","title":"JUDI.fwi_objective","text":"fwi_objective(model, source, dobs; options=Options())\n\nEvaluate the full-waveform-inversion (reduced state) objective function. Returns a tuple with function value and gradient. model is a Model structure with the current velocity model and source and dobs are the wavelets and observed data of type judiVector.\n\nExample\n\nfunction_value, gradient = fwi_objective(model, source, dobs)\n\n\n\n\n\n","category":"function"},{"location":"inversion/#Example","page":"Inversion","title":"Example","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"JUDI is designed to let you set up objective functions that can be passed to standard packages for (gradient-based) optimization. The following example demonstrates how to perform FWI on the 2D Overthrust model using a spectral projected gradient algorithm from the minConf library, which is included in the software. A small test dataset (62 MB) and the model can be downloaded from this FTP server:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"run(`wget ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/2DFWI/overthrust_2D.segy`)\nrun(`wget ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/2DFWI/overthrust_2D_initial_model.h5`)","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"The first step is to load the velocity model and the observed data into Julia, as well as setting up bound constraints for the inversion, which prevent too high or low velocities in the final result. Furthermore, we define an 8 Hertz Ricker wavelet as the source function:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"using PyPlot, HDF5, SegyIO, JUDI, SlimOptim, Statistics, Random\n\n# Load starting model\nn, d, o, m0 = read(h5open(\"overthrust_2D_initial_model.h5\", \"r\"), \"n\", \"d\", \"o\", \"m0\")\nmodel0 = Model((n[1], n[2]), (d[1], d[2]), (o[1], o[2]), m0)\t# need n, d, o as tuples and m0 as array\n\n# Bound constraints\nvmin = ones(Float32, model0.n) .+ 0.3f0\nvmax = ones(Float32, model0.n) .+ 5.5f0\nmmin = vec((1f0 ./ vmax).^2)\t# convert to slowness squared [s^2/km^2]\nmmax = vec((1f0 ./ vmin).^2)\n\n# Load segy data\nblock = segy_read(\"overthrust_2D.segy\")\ndobs = judiVector(block)\n\n# Set up wavelet\nsrc_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\")\t# read source position geometry\nwavelet = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0)\t# 8 Hz wavelet\nq = judiVector(src_geometry, wavelet)\n","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"For this FWI example, we define an objective function that can be passed to the minConf optimization library, which is included in the Julia Devito software package. We allow a maximum of 20 function evaluations using a spectral-projected gradient (SPG) algorithm. To save computational cost, each function evaluation uses a randomized subset of 20 shot records, instead of all 97 shots:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"# Optimization parameters\nfevals = 20\t# number of function evaluations\nbatchsize = 20\t# number of sources per iteration\nfvals = zeros(21)\nopt = Options(optimal_checkpointing = false)    # set to true to enable checkpointing\n\n# Objective function for minConf library\ncount = 0\nfunction objective_function(x)\n\tmodel0.m = reshape(x, model0.n);\n\n\t# fwi function value and gradient\n\ti = randperm(dobs.nsrc)[1:batchsize]\n\tfval, grad = fwi_objective(model0, q[i], dobs[i]; options=opt)\n\tgrad = reshape(grad, model0.n); grad[:, 1:21] .= 0f0\t# reset gradient in water column to 0.\n\tgrad = .1f0*grad/maximum(abs.(grad))\t# scale gradient for line search\n\n\tglobal count; count += 1; fvals[count] = fval\n    return fval, vec(grad.data)\nend\n\n# FWI with SPG\nProjBound(x) = median([mmin x mmax], dims=2)\t# Bound projection\noptions = spg_options(verbose=3, maxIter=fevals, memory=3)\nx, fsave, funEvals= minConf_SPG(objective_function, vec(m0), ProjBound, options)","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"This example script can be run in parallel and requires roughly 220 MB of memory per source location. Execute the following code to generate figures of the initial model and the result, as well as the function values:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"figure(); imshow(sqrt.(1./adjoint(m0))); title(\"Initial model\")\nfigure(); imshow(sqrt.(1./adjoint(reshape(x, model0.n)))); title(\"FWI\")\nfigure(); plot(fvals); title(\"Function value\")","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"(Image: fwi)","category":"page"},{"location":"inversion/#LSRTM","page":"Inversion","title":"LSRTM","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"lsrtm_objective","category":"page"},{"location":"inversion/#JUDI.lsrtm_objective","page":"Inversion","title":"JUDI.lsrtm_objective","text":"lsrtm_objective(model, source, dobs, dm; options=Options(), nlind=false)\n\nEvaluate the least-square migration objective function. Returns a tuple with function value and gradient. model is a Model structure with the current velocity model and source and dobs are the wavelets and observed data of type judiVector. The nlind parameter decide whether the backround velocity synthetic data should be subtracted from the observed data effectively computing the gradient as J'*(J*dm - (d - F*q))`\n\nExample\n\nfunction_value, dm = lsrtm_objective(model, source, dobs, dm)\n\n\n\n\n\n","category":"function"},{"location":"inversion/#Example-2","page":"Inversion","title":"Example","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"JUDI includes matrix-free linear operators for modeling and linearized (Born) modeling, that let you write algorithms for migration that follow the mathematical notation of standard least squares problems. This example demonstrates how to use Julia Devito to perform least-squares reverse-time migration on the 2D Marmousi model. Start by downloading the test data set (1.1 GB) and the model:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"run(`wget ftp://slim.gatech.edu/data/SoftwareRelease/Imaging.jl/2DLSRTM/marmousi_2D.segy`)\nrun(`wget ftp://slim.gatech.edu/data/SoftwareRelease/Imaging.jl/2DLSRTM/marmousi_migration_velocity.h5`)","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"Once again, load the starting model and the data and set up the source wavelet. For this example, we use a Ricker wavelet with 30 Hertz peak frequency. For setting up matrix-free linear operators, an info structure with the dimensions of the problem is required:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"using PyPlot, HDF5, JUDI, SegyIO, Random\n\n# Load smooth migration velocity model\nn,d,o,m0 = read(h5open(\"marmousi_migration_velocity.h5\",\"r\"), \"n\", \"d\", \"o\", \"m0\")\nmodel0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0)\n\n# Load data\nblock = segy_read(\"marmousi_2D.segy\")\ndD = judiVector(block)\n\n# Set up wavelet\nsrc_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\")\nwavelet = ricker_wavelet(src_geometry.t[1],src_geometry.dt[1],0.03)\t# 30 Hz wavelet\nq = judiVector(src_geometry,wavelet)\n\n# Set up info structure\nntComp = get_computational_nt(q.geometry,dD.geometry,model0)\t# no. of computational time steps\ninfo = Info(prod(model0.n),dD.nsrc,ntComp)","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"To speed up the convergence of our imaging example, we set up a basic preconditioner for each the model- and the data space, consisting of mutes to suppress the ocean-bottom reflection in the data and the source/receiver imprint in the image. The operator J represents the linearized modeling operator and its adjoint J' corresponds to the migration (RTM) operator. The forward and adjoint pair can be used for a basic LS-RTM example with (stochastic) gradient descent:","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"# Set up matrix-free linear operators\nopt = Options(optimal_checkpointing = true)    # set to false to disable optimal checkpointing\nF = judiModeling(info, model0, q.geometry, dD.geometry; options=opt)\nJ = judiJacobian(F, q)\n\n# Right-hand preconditioners (model topmute)\nMr = judiTopmute(model0.n, 52, 10)\t# mute up to grid point 52, with 10 point taper\n\n# Stochastic gradient\nx = zeros(Float32, info.n)\t# zero initial guess\nbatchsize = 10\t# use subset of 10 shots per iteration\nniter = 32\nfval = zeros(Float32, niter)\n\nfor j=1:niter\n\tprintln(\"Iteration: \", j)\n\n\t# Select batch and set up left-hand preconditioner\n\ti = randperm(dD.nsrc)[1:batchsize]\n\tMl = judiMarineTopmute2D(30, dD[i].geometry)\t# data topmute starting at time sample 30\n\n\t# Compute residual and gradient\n\tr = Ml*J[i]*Mr*x - Ml*dD[i]\n\tg = adjoint(Mr)*adjoint(J[i])*adjoint(Ml)*r\n\n\t# Step size and update variable\n\tfval[j] = .5f0*norm(r)^2\n\tt = norm(r)^2/norm(g)^2\n\tglobal x -= t*g\nend","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"(Image: lsrtm)","category":"page"},{"location":"inversion/#TWRI","page":"Inversion","title":"TWRI","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"twri_objective","category":"page"},{"location":"inversion/#JUDI.twri_objective","page":"Inversion","title":"JUDI.twri_objective","text":"twri_objective(model, source, dobs; options=Options(), optionswri=TWRIOptions())\n\nEvaluate the time domain Wavefield reconstruction inversion objective function. Returns a tuple with function value and gradient(s) w.r.t to m and/or y. model is a Model structure with the current velocity model and source and dobs are the wavelets and  observed data of type judiVector.\n\nExample\n\nfunction_value, gradient_m, gradient_y = twri_objective(model, source, dobs; options=Options(), optionswri=TWRIOptions())\n\n\n\n\n\n","category":"function"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"and related TWRI options","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"TWRIOptions","category":"page"},{"location":"inversion/#JUDI.TWRIOptions","page":"Inversion","title":"JUDI.TWRIOptions","text":"TWRIOptions\n    grad_corr::Bool\n    comp_alpha::Bool\n    weight_fun\n    eps\n    params::Symbol\n    Invq::String\n\nOptions structure for TWRI.\n\ngrad_corr: Whether to add the gradient correction J'(m0, q)*∇_y\n\ncomp_alpha: Whether to compute optimal alpha (alpha=1 if not)\n\nweight_fun: Whether to apply focusing/weighting function to F(m0)'*y and its norm\n\neps: Epsilon (noise level) value (default=0)\n\nInvq: How to compute F'Y, either as full field or as a rank 1 approximation w(t)*q(x) using the source wavelet for w\n\nparam: Which gradient to compute. Choices are nothing (objective only), :m, :y or :all\n\nConstructor\n\nAll arguments are optional keyword arguments with the following default values:\n\nTWRIOptions(;gradcorr=false, compalpha=true, weight_fun=nothing, eps=0, params=:m)\n\n\n\n\n\n","category":"type"},{"location":"inversion/#Machine-Learning","page":"Inversion","title":"Machine Learning","text":"","category":"section"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"The JUDI4Flux interface allows integrating JUDI modeling operators into convolutional neural networks for deep learning. For example, the following code snippet shows how to create a shallow CNN consisting of two convolutional layers with a nonlinear forward modeling layer in-between them. JUDI4Flux enables backpropagation through Flux' automatic differentiation tool, but calls the corresponding adjoint JUDI operators under the hood. For more details, please check out the JUDI4Flux Github page.","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"# Jacobian\nW1 = judiJacobian(F0, q)\nb1 = randn(Float32, num_samples)\n\n# Fully connected layer\nW2 = randn(Float32, n_out, num_samples)\nb2 = randn(Float32, n_out)\n\n# Network and loss\nnetwork(x) = W2*(W1*x .+ b1) .+ b2\nloss(x, y) = Flux.mse(network(x), y)\n\n# Compute gradient w/ Flux\np = params(x, y, W1, b1, b2)\ngs = Tracker.gradient(() -> loss(x, y), p)\ngs[x]\t# gradient w.r.t. to x","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"JUDI4Flux allows implementing physics-augmented neural networks for seismic inversion, such as loop-unrolled seismic imaging algorithms. For example, the following results are a conventional RTM image, an LS-RTM image and a loop-unrolled LS-RTM image for a single simultaneous shot record.","category":"page"},{"location":"inversion/","page":"Inversion","title":"Inversion","text":"(Image: flux)","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"JUDI is a linear algebra abstraction built on top of Devito. Because Devito is a just-in-time compiler, you will need to have a standard C compiler installed. by default most system come with a gcc compiler (except Windows where we recommend to use docker or WSL) which unfortunately isnt' very reliable. It is therefore recommended to install a proper compiler (gcc>=7, icc). For GPU offloading, you will then need to install a proper offloading compiler such as Nvidia's nvc or the latest version of clang (not Apple clang).","category":"page"},{"location":"installation/#Standard-installation","page":"Installation","title":"Standard installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"JUDI is registered and can be installed directly in julia REPL","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add JUDI","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"This will install JUDI, and the build will install the necessary dependencies including Devito.","category":"page"},{"location":"installation/#Custom-installation","page":"Installation","title":"Custom installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"In some case you may want to have your own installation of Devtio you want JUDI to use in which case you should foloow these steps.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"First, install Devito using pip, or see the Devito's GitHub page for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL):","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"pip3 install --user git+https://github.com/devitocodes/devito.git","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add JUDI","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export PYTHON=$(which python3)\njulia -e 'using Pkg; Pkg.build(\"PyCall\")'","category":"page"},{"location":"installation/#Running-with-Docker","page":"Installation","title":"Running with Docker","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"docker run -p 8888:8888 philippwitte/judi:v1.3","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"docker run -it philippwitte/judi:v1.3 /bin/bash","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Inside the container, all examples are located in the directory /app/judi/examples/scripts.","category":"page"},{"location":"installation/#Configure-compiler-and-OpenMP","page":"Installation","title":"Configure compiler and OpenMP","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as gnu. Either run the following command from the command line or add it to your ~/.bashrc file:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export DEVITO_ARCH=gnu","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export DEVITO_LANGUAGE=openmp  # Enable OpenMP. \nexport OMP_NUM_THREADS=4    # Number of OpenMP threads","category":"page"},{"location":"io/#Input/Output","page":"Input/Output","title":"Input/Output","text":"","category":"section"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"For reading and writing SEG-Y data, JUDI uses the SegyIO.jl package. JUDI supports reading SEG-Y from disk into memory, as well as working with out-of-core (OOC) data containers. In the latter case, judiVectors contain look-up tables that allow accessing the underlying data in constant time.","category":"page"},{"location":"io/#Reading-SEG-Y-files-into-memory","page":"Input/Output","title":"Reading SEG-Y files into memory","text":"","category":"section"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"To read a single SEG-Y file into memory, use the segy_read function:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"using SegyIO\n\nblock = segy_read(\"data.segy\")","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"From a SegyIO data block, you can create an in-core judiVector, as well as a Geometry object for the source:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"# judiVector for observed data\nd_obs = judiVector(block; segy_depth_key=\"RecGroupElevation\")\n\n# Source geometry\nsrc_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\")","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"The optional keyword segy_depth_key specifies which SEG-Y header stores the depth coordinate. After reading a block, you can check block.traceheaders to see which trace headers are set and where to find the depth coordinates for sources or receivers.","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"The d_obs vector constains the receiver geometry in d_obs.geometry, so there is no need to set up a separate geometry object manually. However, in principle we can set up a receiver Geometry object as follows:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"rec_geometry = Geometry(block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\")","category":"page"},{"location":"io/#Writing-SEG-Y-files","page":"Input/Output","title":"Writing SEG-Y files","text":"","category":"section"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"To write a judiVector as a SEG-Y file, we need a judiVector containing the receiver data and geometry, as well as a judiVector with the source coordinates. From the judiVectors, we first create a SegyIO block:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"block = judiVector_to_SeisBlock(d_obs, q)","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"where d_obs and q are judiVectors for receiver and source data respectively. To save only the source q, we can do","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"block = src_to_SeisBlock(q)","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Next, we can write a SEG-Y file from a SegyIO block:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"segy_write(\"new_file.segy\", block)  # writes a SEG-Y file called new_file.segy","category":"page"},{"location":"io/#Reading-out-of-core-SEG-Y-files","page":"Input/Output","title":"Reading out-of-core SEG-Y files","text":"","category":"section"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"For SEG-Y files that do not fit into memory, JUDI provides the possibility to work with OOC data containers. First, SegyIO scans also available files and then creates a lookup table, including a summary of the most important SEG-Y header values. See SegyIO's documentation for more information.","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"First we provide the path to the directory that we want to scan, as well as a string that appears in all the files we want to scan. For example, here we want to scan all files that contain the string \"bp_observed_data\". The third argument is a list of SEG-Y headers for which we create a summary. For creating OOC judiVectors, always include the \"GroupX\", \"GroupY\" and \"dt\" keyworkds, as well as the keywords that carry the source and receiver depth coordinates:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"# Specify direcotry to scan\npath_to_data = \"/home/username/data_directory/\"\n\n# Scan files in given directory and create OOC data container\ncontainer = segy_scan(path_to_data, \"bp_observed_data\", [\"GroupX\", \"GroupY\", \n    \"RecGroupElevation\", \"SourceDepth\", \"dt\"])","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Depending of the number and size of the underlying files, this process can take multiple hours, but it only has to be executed once! Furthermore, parallel scanning is supported as well. ","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Once we have scanned all files in the directory, we can create an OOC judiVector and source Geometry object as follows:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"# Create OOC judiVector\nd_obs = judiVector(container; segy_depth_key=\"RecGroupElevation\")\n\n# Create OOC source geometry object\nsrc_geometry = Geometry(container; key=\"source\", segy_depth_key=\"SourceDepth\")","category":"page"},{"location":"io/#Reading-and-writing-velocity-models","page":"Input/Output","title":"Reading and writing velocity models","text":"","category":"section"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"JUDI does not require velocity models to be read or saved in any specific format. Any file format that allows reading the velocity model as a two or three-dimensional Julia array will work.","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"In our examples, we often use the JLD or HDF5 packages to read/write velocity models and the corresponing meta data (i.e. grid spacings and origins). If your model is a SEG-Y file, use the segy_read function from SegyIO as shown above.","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Create an example model to write and read:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"n = (120, 100)\nd = (10.0, 10.0)\no = (0.0, 0.0)\nv = ones(Float32, n) .* 1.5f0\nm = 1f0 ./ v.^2","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Write a model as a .jld file:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"using JLD\n\nsave(\"my_model.jld\", \"n\", n, \"d\", d, \"o\", o, \"m\", m)","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"Read a model from a .jld file:","category":"page"},{"location":"io/","page":"Input/Output","title":"Input/Output","text":"# Returns a Julia dictionary\nM = load(\"my_model.jld\")\n\nn = M[\"n\"]\nd = M[\"d\"]\no = M[\"o\"]\nm = M[\"m\"]\n\n# Set up a Model object\nmodel = Model(n, d, o, m)","category":"page"},{"location":"tutorials/fwi_example_NLopt/#FWI-with-Quasi-Newton-methods-from-the-NLopt-library","page":"-","title":"FWI with Quasi-Newton methods from the NLopt library","text":"","category":"section"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"In this notebook, we demonstrate how to interface the NLopt optimization library for full-waveform inversion with a limited-memory Quasi-Newton (L-BFGS) algorithm. Once again, we start by adding additional workers for parallel computing and by loading all necessary modules:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"using Distributed; addprocs(2)\n@everywhere using SegyIO, HDF5, PyPlot, JUDI, NLopt, Random, LinearAlgebra, Printf","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"We load the FWI starting model from the HDF5 model file and set up the JUDI model structure:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\"); title(\"Starting model\")\nmodel0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0);\nimshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0));\nxlabel(\"Lateral position [km]\");\nylabel(\"Depth [km]\");","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"(Image: png)","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"Then we read the SEG-Y file containing our test data set. The data was generated with a 2D excerpt from the Overthrust velocity model and consists of 31 shot records with 2 seconds recording time. We load the data and set up a JUDI seismic data vector:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"block = segy_read(\"overthrust_shot_records.segy\");\nd_obs = judiVector(block);","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"┌ Warning: Fixed length trace flag set in stream: IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=7076688, maxsize=Inf, ptr=3601, mark=-1)\n└ @ SegyIO /Users/mathiaslouboutin/.julia/packages/SegyIO/uw4ZW/src/read/read_file.jl:26","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"extent = [0, 10, 2, 0]\nfigure(figsize=(7, 7))\nsubplot(221)\nimshow(d_obs.data[1], vmin=-1, vmax=1, cmap=\"PuOr\", extent=extent, aspect=4, interpolation=\"hamming\")\nxlabel(\"Receiver position(km)\")\nylabel(\"Time(s)\")\nsubplot(222)\nimshow(d_obs.data[6], vmin=-1, vmax=1, cmap=\"PuOr\", extent=extent, aspect=4, interpolation=\"hamming\")\nxlabel(\"Receiver position(km)\")\nylabel(\"Time(s)\")\nsubplot(223)\nimshow(d_obs.data[11], vmin=-1, vmax=1, cmap=\"PuOr\", extent=extent, aspect=4, interpolation=\"hamming\")\nxlabel(\"Receiver position(km)\")\nylabel(\"Time(s)\")\nsubplot(224)\nimshow(d_obs.data[16], vmin=-1, vmax=1, cmap=\"PuOr\", extent=extent, aspect=4, interpolation=\"hamming\")\nxlabel(\"Receiver position(km)\")\nylabel(\"Time(s)\")\ntight_layout()\n","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"(Image: png)","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"Since the SEG-Y file contains the source coordinates, but not the wavelet itself, we create a JUDI Geometry structure for the source and then manually set up an 8 Hz Ricker wavelet. As for the observed data, we set up a JUDI seismic data vector q with the source geometry and wavelet:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"src_geometry = Geometry(block; key=\"source\");\nsrc_data = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0);\nq = judiVector(src_geometry, src_data);","category":"page"},{"location":"tutorials/fwi_example_NLopt/#Optimization","page":"-","title":"Optimization","text":"","category":"section"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"Rather than implementing the L-BFGS algorithms in Julia ourselves, we interface the NLopt optimization library. This library requires objective functions with the current variable and gradient as input arguments and the function value as the only output argument. For this reason, we build a wrapper that is customized for the NLopt library around our fwi_objective function. The function f! takes a vectorized estimate of the current model as well as the (vectorized) gradient as input arguments. NLopt uses double precision for floating point variables, so the first step inside f! is to reshape and convert the model to single precision. Then we choose a randomized subset of sources and shot records and compute the function value fval and gradient of the FWI objective function. We then set the gradient in the water layer to zero and overwrite the input gradient grad with the new gradient. Furthermore, we keep track of the number of function evaluations through increasing the count variable, which will serve as the termination criterion for the algorithm. In Julia, we set up f! in the following way: ","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"batchsize = 8;\ncount = 0;\n\n# NLopt objective function\nfunction f!(x, grad)\n    global count\n    if count == 0\n        @printf(\"%10s %15s %15s\\n\",\"Iteration\",\"Function Val\",\"norm(g)\")\n    end\n    # Update model\n    model0.m = Float32.(reshape(x,model0.n))\n\n    # Seclect batch and calculate gradient\n    i = randperm(d_obs.nsrc)[1:batchsize]\n    fval, gradient = fwi_objective(model0, q[i], d_obs[i])\n\n    # Reset gradient in water column to zero\n    gradient = reshape(gradient, model0.n)\n    gradient[:,1:21] .= 0f0\n    grad[1:end] = vec(gradient)\n          \n    global count; count += 1\n    @printf(\"%10d %15.5e %15.5e\\n\",count, fval, norm(g))\n    return convert(Float64, fval)\nend","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"UndefVarError: @printf not defined","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"g = zeros(prod(model0.n))\nf0 = f!(vec(model0.m), g)\n# Reset count\nglobal count = 0;","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"1    255339.66398837214    262117.01773563828\n\n\n\n\n\n255339.66398837214","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"imshow(reshape(g, model0.n)', vmin=-1e3, vmax=1e3, extent=(0,10,3,0), cmap=\"jet\")\ntitle(\"FWI first gradient\")\nxlabel(\"Lateral position [km]\");\nylabel(\"Depth [km]\");","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"(Image: png)","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"As in our gradient descent and Gauss-Newton example, we define bound constraints for the squared slowness to prevent velocities from becoming negative or too large:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"# Set up bound constrains\nv0 = sqrt.(1f0./model0.m)\nvmin = ones(Float32, model0.n) .* 1.3f0;\nvmax = ones(Float32, model0.n) .* 6.5f0;\n\n# Convert to squared slowness\nmmin = vec((1f0 ./ vmax).^2);\nmmax = vec((1f0 ./ vmin).^2);","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"The NLopt library offers a range of different optimization algorithms, from which we choose the L-BFGS method. We create an optimization object called opt by specifying the algorithm we want to use and the dimenions of the unknown model vector. We then set the upper and lower bounds of the variable, define f! as the objective function and set the termination criterion to be a maximum of 15 function evaluations:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"opt = Opt(:LD_LBFGS, prod(model0.n))\nlower_bounds!(opt, mmin)\nupper_bounds!(opt, mmax)\nmin_objective!(opt, f!)\nmaxeval!(opt, 15)","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"Remark: Subsampling the number of sources should in practice never be used for second order methods such as L-BFGS. Specialized stochastic second order methods exist, but differ from standard Quasi-Newton methods. We only use source subsampling to reduce the computational cost of our example. Having set up the objective function, bound constraints and termination criterion, we can now run the inversion:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"** This example requires ~200 MB of memory per gradient, i.e. 800 MB with four parallel workers. It runs for approximately 15 minutes. **","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"(minf, minx, ret) = optimize(opt, vec(model0.m));","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"2    257901.94477162338    258980.10388516955\n3    172803.59079827153    302780.85054677405\n4    189130.6172962864    318396.30082959705\n5    206791.76877585545    375180.5596427598\n6    214141.76860964662    406769.76629408816\n7    364202.2299721926    359639.79808253766\n8    144399.94956911763    208320.48800925835\n9    115243.88926892391    196391.16164069102\n10    83024.91172473418    233775.52396071967\n11    79410.95713778166    217893.00687219884\n12    67300.58613575318    210013.1922979365\n13    51630.938175045296    108049.05286704176\n14    46403.458416860216    117827.36750250543\n15    43086.70610388414    94403.35456695667\n16    35267.624712575205    96966.99249506553","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"We plot the final velocity model after 15 function evaluations:","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"imshow(sqrt.(1f0./reshape(minx, model0.n))', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with L-BFGS\")\nxlabel(\"Lateral position [km]\");\nylabel(\"Depth [km]\");","category":"page"},{"location":"tutorials/fwi_example_NLopt/","page":"-","title":"-","text":"(Image: png)","category":"page"},{"location":"about/#Authors","page":"About","title":"Authors","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This package was written by Philipp Witte and Mathias Louboutin from the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology. People involved in the development of JUDI include:","category":"page"},{"location":"about/","page":"About","title":"About","text":"Philipp A. Witte^* (Now MSFT)\nMathias Louboutin (Georgia Institute of Technology)\nHenryk Modzelewski (The Univeristy of British Columbia)\nFelix J. Herrmann (Georgia Institute of Technology)","category":"page"},{"location":"about/","page":"About","title":"About","text":"And you can find the full list of collaborators on github at Contributors.","category":"page"},{"location":"about/#Cite-us","page":"About","title":"Cite us","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"If you use our software for your research, please cite our Geophysics paper:","category":"page"},{"location":"about/","page":"About","title":"About","text":"@article{witteJUDI2019,\nauthor = {Philipp A. Witte and Mathias Louboutin and Navjot Kukreja and Fabio Luporini and Michael Lange and Gerard J. Gorman and Felix J. Herrmann},\ntitle = {A large-scale framework for symbolic implementations of seismic inversion algorithms in Julia},\njournal = {GEOPHYSICS},\nvolume = {84},\nnumber = {3},\npages = {F57-F71},\nyear = {2019},\ndoi = {10.1190/geo2018-0174.1},\nURL = {https://doi.org/10.1190/geo2018-0174.1},\neprint = {https://doi.org/10.1190/geo2018-0174.1}\n}","category":"page"},{"location":"about/","page":"About","title":"About","text":"Also visit the Devito homepage at https://www.devitoproject.org/publications for more information and references. If you need to cite a specific version of JUDI, you can find our citeable archives on Zenodo.","category":"page"},{"location":"about/#Contribution-and-community","page":"About","title":"Contribution and community","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"We gladly welcome and encorage contributions from the community to improve our software and its usability. Feel free to:","category":"page"},{"location":"about/","page":"About","title":"About","text":"Open issues for bugs\nStart discussions to interat with the developper and ask any questions\nOpen PR for bug fixes and improvements","category":"page"},{"location":"helper/#Helper-functions","page":"Helper Functions","title":"Helper functions","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"JUDI provides numerous helper and utility functions need for seismic modeling and inversion.","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Pages = [\"helper.md\"]","category":"page"},{"location":"helper/#Ricker-wavelet","page":"Helper Functions","title":"Ricker wavelet","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Create a 1D Ricker wavelet:","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"ricker_wavelet(tmax, dt, f0; t0=nothing)","category":"page"},{"location":"helper/#JUDI.ricker_wavelet-Tuple{Any, Any, Any}","page":"Helper Functions","title":"JUDI.ricker_wavelet","text":"source(tmax, dt, f0)\n\nCreate seismic Ricker wavelet of length tmax (in milliseconds) with sampling interval dt (in milliseonds)\nand central frequency f0 (in kHz).\n\n\n\n\n\n","category":"method"},{"location":"helper/#Compute-CFL-time-stepping-interval","page":"Helper Functions","title":"Compute CFL time stepping interval","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Calculate the time stepping interval based on the CFL condition","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"calculate_dt","category":"page"},{"location":"helper/#Compute-number-of-computational-time-steps","page":"Helper Functions","title":"Compute number of computational time steps","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Estimate the number of computational time steps. Required for calculating the dimensions of the matrix-free linear modeling operators:","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"get_computational_nt","category":"page"},{"location":"helper/#JUDI.get_computational_nt","page":"Helper Functions","title":"JUDI.get_computational_nt","text":"get_computational_nt(srcGeometry, recGeoemtry, model; dt=nothing)\n\nEstimate the number of computational time steps. Required for calculating the dimensions\nof the matrix-free linear modeling operators. srcGeometry and recGeometry are source\nand receiver geometries of type Geometry and model is the model structure of type \nModel.\n\n\n\n\n\nget_computational_nt(Geoemtry, model; dt=nothing)\n\nEstimate the number of computational time steps. Required for calculating the dimensions\nof the matrix-free linear modeling operators. srcGeometry and recGeometry are source\nand receiver geometries of type Geometry and model is the model structure of type \nModel.\n\n\n\n\n\n","category":"function"},{"location":"helper/#Set-up-3D-acquisition-grid","page":"Helper Functions","title":"Set up 3D acquisition grid","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Helper function to create a regular acquisition grid for a 3D survey.","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"setup_3D_grid","category":"page"},{"location":"helper/#Data-interpolation","page":"Helper Functions","title":"Data interpolation","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Time interpolation for source/receiver data using splines. For modeling, the data is interpolated automatically onto the computational time axis, so generally, these functions are not needed for users.","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"time_resample","category":"page"},{"location":"helper/#JUDI.time_resample","page":"Helper Functions","title":"JUDI.time_resample","text":"time_resample(data, geometry_in, dt_new)\n\nResample the input data with sinc interpolation from the current time sampling (geometrtyin) to the new time sampling `dtnew`.\n\nParameters\n\ndata: Data to be reampled. If data is a matrix, resamples each column.\ngeometry_in: Geometry on which data is defined.\ndt_new: New time sampling rate to interpolate onto.\n\n\n\n\n\ntime_resample(data, dt_in, geometry_in)\n\nResample the input data with sinc interpolation from the current time sampling (dtin) to the new time sampling `geometryout`.\n\nParameters\n\ndata: Data to be reampled. If data is a matrix, resamples each column.\ngeometry_out: Geometry on which data is to be interpolated.\ndt_in: Time sampling rate of the data.\n\n\n\n\n\n","category":"function"},{"location":"helper/#Generate-and-sample-from-frequency-distribution","page":"Helper Functions","title":"Generate and sample from frequency distribution","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Create a probability distribution with the shape of the source spectrum from which we can draw random frequencies.","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"generate_distribution","category":"page"},{"location":"helper/#JUDI.generate_distribution","page":"Helper Functions","title":"JUDI.generate_distribution","text":"generate_distribution(x; src_no=1)\n\nGenerates a probability distribution for the discrete input judiVector x.\n\nParameters\n\nx: judiVector. Usualy a source with a single trace per source position.\nsrc_no: Index of the source to select out of x\n\n\n\n\n\n","category":"function"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"We can draw random samples from dist by passing it values between 0 and 1:","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"# Draw a single random frequency\nf = dist(rand(1))\n\n# Draw 10 random frequencies\nf = dist(rand(10))","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"Alternatively, we can use the function:","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"f = select_frequencies(dist; fmin=0f0, fmax=Inf, nf=1)","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"to draw nf number of frequencies for a given distribution dist in the frequency range of fmin to fmax (both in kHz).","category":"page"},{"location":"helper/#Read-data-from-out-of-core-container","page":"Helper Functions","title":"Read data from out of core container","text":"","category":"section"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"In the case where a judiVector is out of core (points to a segy file) it is possible to convert it or part of it into an in core judiVecor with the get_data function.","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"d_ic = get_data(d_ooc, inds)","category":"page"},{"location":"helper/","page":"Helper Functions","title":"Helper Functions","text":"where inds is either a single index, a list of index or a range of index.","category":"page"},{"location":"preconditioners/#Seismic-Preconditioners","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"","category":"section"},{"location":"preconditioners/#Model-topmute","page":"Seismic Preconditioners","title":"Model topmute","text":"","category":"section"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Create a linear operator for a 2D model topmute, i.e. for muting the water column:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Mr = judiTopmute(n, mute_start, length)","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Parameters:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"n: Tuple of model dimensions (e.g. from model.n)\nmute_start: First grid point in z-direction from where on to mute the image. Can be a single integer or a vector of length nx, where nx is the number of grid points in x direction.\nlength: The mask is created with a linear taper from 0 to 1. The width of the taper is length.","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Usage:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"# Forward\nm_mute = Mr*vec(m)\n\n# Adjoint\nm_mute = Mr'*vec(m)","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"As Mr is self adjoint, Mr is equal to Mr'.","category":"page"},{"location":"preconditioners/#Model-depth-scaling","page":"Seismic Preconditioners","title":"Model depth scaling","text":"","category":"section"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Create a 2D model depth scaling:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Mr = judiDepthScaling(model)","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Parameters:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"model: JUDI Model structure.","category":"page"},{"location":"preconditioners/#Data-topmute-(experimental)","page":"Seismic Preconditioners","title":"Data topmute (experimental)","text":"","category":"section"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Create a data topmute for a 2D marine shot record (i.e. for a shot record with an end-on-spread acquisition geometry).","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Ml = judiMarineTopmute2D(muteStart, geometry; flipmask=false)","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"Parameters:","category":"page"},{"location":"preconditioners/","page":"Seismic Preconditioners","title":"Seismic Preconditioners","text":"muteStart: Vertical index of the apex of the shot record (i.e. the earliest point from where to mute).\ngeometry: A JUDI Geometry object with the receiver geometry.\nflipmask: If the source is on the left side, set to false (default). If the source is on the right side, set to true.","category":"page"},{"location":"data_structures/#Data-structures","page":"Data Structures","title":"Data structures","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Pages = [\"data_structures.md\"]","category":"page"},{"location":"data_structures/#Physical-Parameter","page":"Data Structures","title":"Physical Parameter","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Data structure for physical parameter array in JUDI. A PhysicalParameter inherits from julia AbstractVector","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"PhysicalParameter","category":"page"},{"location":"data_structures/#JUDI.PhysicalParameter","page":"Data Structures","title":"JUDI.PhysicalParameter","text":"PhysicalParameter\n    n::IntTuple\n    d::RealTuple\n    o::RealTuple\n    data::Union{Array, Number}\n\nPhysicalParameter structure for physical space parameter.\n\nn: number of gridpoints in (x,y,z) for 3D or (x,z) for 2D\n\nd: grid spacing in (x,y,z) or (x,z) (in meters)\n\no: origin of coordinate system in (x,y,z) or (x,z) (in meters)\n\ndata: the array of the parameter values of size n\n\nConstructor\n\nA PhysicalParameter can be constructed in various ways but always require the origin o and grid spacing d that cannot be infered from the array.\n\nPhysicalParameter(v::Array{vDT}, d, o) where `v` is an n-dimensional array and n=size(v)\n\nPhysicalParameter(n, d, o; vDT=Float32) Creates a zero PhysicalParameter\n\nPhysicalParameter(v::Array{vDT}, A::PhysicalParameter) Creates a PhysicalParameter from the Array `v` with n, d, o from `A`\n\nPhysicalParameter(v::Array{vDT, N}, n::Tuple, d::Tuple, o::Tuple) where `v` is a vector or nd-array that is reshaped into shape `n`\n\nPhysicalParameter(v::vDT, n::Tuple, d::Tuple, o::Tuple) Creates a constant (single number) PhyicalParameter\n\n\n\n\n\n","category":"type"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Unless specified otherwise with the return_array option in Options, the result of a migration/FWIgradient(judiJacobian, fwi_objective, lsrtm_objective) will be wrapped into a PhysicalParameter. THis allow better handling of different model parts and a better representation of the dimensional array.","category":"page"},{"location":"data_structures/#Model-structure","page":"Data Structures","title":"Model structure","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Data structure for velocity models in JUDI.","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Model","category":"page"},{"location":"data_structures/#JUDI.Model","page":"Data Structures","title":"JUDI.Model","text":"Model\n    n::IntTuple\n    d::RealTuple\n    o::RealTuple\n    nb::Integer\n    params::Dict\n    rho::Array\n\nModel structure for seismic velocity models.\n\nn: number of gridpoints in (x,y,z) for 3D or (x,z) for 2D\n\nd: grid spacing in (x,y,z) or (x,z) (in meters)\n\no: origin of coordinate system in (x,y,z) or (x,z) (in meters)\n\nnb: number of absorbing boundary points in each direction\n\nparams: Physical parameters such has squared slowness, denisty or THomesne parameters\n\nConstructor\n\nThe parameters n, d, o and m are mandatory, whith nb and other physical parameters being optional input arguments.\n\nModel(n, d, o, m; nb=40, rho=1, epsilon=0, delta=0, theta=0, phi=0)\n\nwhere\n\nm: velocity model in slowness squared (s^2/km^2)\n\nepsilon: Epsilon thomsen parameter ( between -1 and 1)\n\ndelta: Delta thomsen parameter ( between -1 and 1 and delta < epsilon)\n\ntheta: Anisotopy dip in radian\n\nphi: Anisotropy asymuth in radian\n\nrho: density (g / m^3)\n\n\n\n\n\n","category":"type"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Accessible fields include all of the above parameters p.n, p.d, p.o, p.data. Additionaly, arithmetic operation are all impemented such as addition, multiplication, broadcasting and indexing. Linear algebra operation are implemented as well but will return a standard Julia vector if the matrix used is external to JUDI.","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Access fields:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Accessible fields include all of the above parameters, which can be accessed as follows:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"# Access model\nmodel.m\n\n# Access number of grid points\nmodel.n","category":"page"},{"location":"data_structures/#Geometry-structure","page":"Data Structures","title":"Geometry structure","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"JUDI's geometry structure contains the information of either the source or the receiver geometry. Construct an (in-core) geometry object for either a source or receiver set up:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":" Geometry(xloc, yloc, zloc; dt=[], t=[], nsrc=nothing)","category":"page"},{"location":"data_structures/#JUDI.Geometry-Tuple{Any, Any, Any}","page":"Data Structures","title":"JUDI.Geometry","text":"Geometry\n    xloc::Array{Array{T, 1},1}\n    yloc::Array{Array{T, 1},1}\n    zloc::Array{Array{T, 1},1}\n    dt::Array{T,1}\n    nt::Array{Integer,1}\n    t::Array{T,1}\n\nGeometry structure for seismic sources or receivers. Each field is a cell array, where individual cell entries\ncontain values or arrays with coordinates and sampling information for the corresponding shot position. The \nfirst three entries are in meters and the last three entries in milliseconds.\n\nConstructors\n\nOnly pass dt and n and automatically set t:\n\nGeometry(xloc, yloc, zloc; dt=[], nt=[])\n\nPass single array as coordinates/parameters for all nsrc experiments:\n\nGeometry(xloc, yloc, zloc, dt=[], nt=[], nsrc=1)\n\nCreate geometry structure for either source or receivers from a SegyIO.SeisBlock object.\nsegy_depth_key is the SegyIO keyword that contains the depth coordinate and key is \nset to either source for source geometry or receiver for receiver geometry:\n\nGeometry(SeisBlock; key=\"source\", segy_depth_key=\"\")\n\nCreate geometry structure for from a SegyIO.SeisCon object (seismic data container):\n\nGeometry(SeisCon; key=\"source\", segy_depth_key=\"\")\n\nExamples\n\n(1) Set up receiver geometry for 2D experiment with 4 source locations and 80 fixed receivers:\n\nxrec = range(100,stop=900,length=80)\nyrec = range(0,stop=0,length=80)\nzrec = range(50,stop=50,length=80)\ndt = 4f0\nt = 1000f0\n\nrec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=t, nsrc=4)\n\n(2) Set up corresponding source geometry (coordinates can be of type linspace or regular arrays):\n\nxsrc = [200,400,600,800]\nysrc = [0,0,0,0]\nzsrc = [50,50,50,50]\n\nsrc_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=t, nsrc=4)\n\n(3) Read source and receiver geometries from SEG-Y file:\n\nusing SegyIO\nseis_block = segy_read(\"test_file.segy\")\nrec_geometry = Geometry(seis_block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\")\nsrc_geometry = Geometry(seis_block; key=\"source\", segy_depth_key=\"SourceDepth\")\n\nCheck the seis_block's header entries to findall out which keywords contain the depth coordinates.\nThe source depth keyword is either SourceDepth or SourceSurfaceElevation. The receiver depth \nkeyword is typically RecGroupElevation.\n\n(4) Read source and receiver geometries from out-of-core SEG-Y files (for large data sets). Returns an out-of-core \ngeometry object GeometryOOC without the source/receiver coordinates, but a lookup table instead:\n\nusing SegyIO\nseis_container = segy_scan(\"/path/to/data/directory\",\"filenames\",[\"GroupX\",\"GroupY\",\"RecGroupElevation\",\"SourceDepth\",\"dt\"])\nrec_geometry = Geometry(seis_container; key=\"receiver\", segy_depth_key=\"RecGroupElevation\")\nsrc_geometry = Geometry(seis_container; key=\"source\", segy_depth_key=\"SourceDepth\")\n\n\n\n\n\n","category":"method"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"From the optional arguments, you have to pass (at least) two of dt, nt and t. The third value is automatically determined and set from the two other values. a Geometry can be constructed in a number of different ways for in-core and out-of-core cases. Check our examples and the source for additional details while the documentation is being extended.","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Access fields:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Accessible fields include all of the above parameters, which can be accessed as follows:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"# Access cell arrays of x coordinates:\ngeometry.xloc\n\n# Access x coordinates of the i-th source location\ngeometry.xloc[i]\n\n# Access j-th receiver location (in x) of the i-th source location\ngeometry.xloc[i][j]","category":"page"},{"location":"data_structures/#Info-structure","page":"Data Structures","title":"Info structure","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"The info structure contains some basic dimensionality information that needs to be available to any type of linear operator:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Info(n::Integer, nsrc::Integer, nt::Integer)","category":"page"},{"location":"data_structures/#JUDI.Info-Tuple{Integer, Integer, Integer}","page":"Data Structures","title":"JUDI.Info","text":"Info\n    n::Integer\n    nsrc::Integer\n    nt::Array{Any,1}\n\nInfo structure that contains information from which the dimensions of Modeling\nand Projection operators can be inferred.\n\nConstructor\n\nInput arguments are total number of grid points n, number of source positions nsrc and\nnumber of computational time steps nt (either as single integer or cell array):\n\nInfo(n, nsrc, nt)\n\n\n\n\n\n","category":"method"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"You can automatically obtain the number of computational time steps as follows:","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"nt = get_computational_nt(src_geometry, rec_geometry, model)","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"where src_geometry is a Geometry object with the source geometry, rec_geometry is a Geometry object with the receiver geometry and model is a Model structure.","category":"page"},{"location":"data_structures/#Options-structure","page":"Data Structures","title":"Options structure","text":"","category":"section"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"The options structure allows setting several modeling parameters.","category":"page"},{"location":"data_structures/","page":"Data Structures","title":"Data Structures","text":"Options","category":"page"},{"location":"data_structures/#JUDI.Options","page":"Data Structures","title":"JUDI.Options","text":"Options\n    space_order::Integer\n    free_surface::Bool\n    limit_m::Bool\n    buffer_size::Real\n    save_rate::Real\n    save_data_to_disk::Bool\n    file_path::String\n    file_name::String\n    sum_padding::Bool\n    optimal_checkpointing::Bool\n    num_checkpoints::Integer\n    checkpoints_maxmem::Real\n    frequencies::Array\n    isic::Bool\n    subsampling_factor::Integer\n    dft_subsampling_factor::Integer\n    return_array::Bool\n    dt_comp::Real\n    f0::Real\n\nOptions structure for seismic modeling.\n\nspace_order: finite difference space order for wave equation (default is 8, needs to be multiple of 4)\n\nfree_surface: set to true to enable a free surface boundary condition.\n\nlimit_m: for 3D modeling, limit modeling domain to area with receivers (saves memory)\n\nbuffer_size: if limit_m=true, define buffer area on each side of modeling domain (in meters)\n\nsave_data_to_disk: if true, saves shot records as separate SEG-Y files\n\nfile_path: path to directory where data is saved\n\nfile_name: shot records will be saved as specified file name plus its source coordinates\n\nsum_padding: when removing the padding area of the gradient, sum into boundary rows/columns for true adjoints\n\noptimal_checkpointing: instead of saving the forward wavefield, recompute it using optimal checkpointing\n\nnum_checkpoints: number of checkpoints. If not supplied, is set to log(num_timesteps).\n\ncheckpoints_maxmem: maximum amount of memory that can be allocated for checkpoints (MB)\n\nfrequencies: calculate the FWI/LS-RTM gradient in the frequency domain for a given set of frequencies\n\nsubsampling_factor: compute forward wavefield on a time axis that is reduced by a given factor (default is 1)\n\ndft_subsampling_factor: compute on-the-fly DFTs on a time axis that is reduced by a given factor (default is 1)\n\nisic: use linearized inverse scattering imaging condition\n\nreturn_array: return data from nonlinear/linear modeling as a plain Julia array.\n\ndt_comp: overwrite automatically computed computational time step with this value.\n\nf0: define peak frequency.\n\nConstructor\n\nAll arguments are optional keyword arguments with the following default values:\n\nOptions(;space_order=8, free_surface=false,\n        limit_m=false, buffer_size=1e3,\n        save_data_to_disk=false, file_path=\"\",\n        file_name=\"shot\", sum_padding=false,\n        optimal_checkpointing=false,\n        num_checkpoints=nothing, checkpoints_maxmem=nothing,\n        frequencies=[], isic=false,\n        subsampling_factor=1, dft_subsampling_factor=1, return_array=false,\n        dt_comp=nothing, f0=0.015f0)\n\n\n\n\n\n","category":"type"},{"location":"tutorials/judi_leading_edge_tutorial/#Geophysics-tutorial","page":"Full-Waveform Inversion - Part 3: optimization","title":"Geophysics tutorial","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/#Full-Waveform-Inversion-Part-3:-optimization","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Philipp Witte<sup>1</sup>*, Mathias Louboutin<sup>1</sup>, Keegan Lensink<sup>1</sup>, Michael Lange<sup>2</sup>, Navjot Kukreja<sup>2</sup>, Fabio Luporini<sup>2</sup>, Gerard Gorman<sup>2</sup>, and Felix J. Herrmann<sup>1,3</sup>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<sup>1</sup> Seismic Laboratory for Imaging and Modeling (SLIM), The University of British Columbia ","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<sup>2</sup> Imperial College London, London, UK","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<sup>3</sup> now at Georgia Institute of Technology, USA ","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Corresponding author: pwitte.slim@gmail.com","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#Introduction","page":"Full-Waveform Inversion - Part 3: optimization","title":"Introduction","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"This tutorial is the third part of a full-waveform inversion (FWI) tutorial series with a step-by-step walkthrough of setting up forward and adjoint wave equations and building a basic FWI inversion framework. For discretizing and solving wave equations, we use [Devito], a Python-based domain-specific language for automated generation of finite-difference code (Lange et al., 2016). The first two parts of this tutorial (Louboutin et al., 2017, 2018) demonstrated how to solve the acoustic wave equation for modeling seismic shot records and how to compute the gradient of the FWI objective function using the adjoint-state method. With these two key ingredients, we will now build an inversion framework that can be used to minimize the FWI least-squares objective function.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"[Devito]:http://www.opesci.org/devito-public [Julia]:https://julialang.org [JUDI]:https://github.com/slimgroup/JUDI.jl/tree/tletutorialjan_2018","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"FWI is a computationally and mathematically challenging problem. The computational complexity comes from the fact that an already expensive solution procedure for the wave equation needs to be repeated for a large number of source positions for each iteration of the optimization algorithm. The mathematical complexity comes from the fact that the FWI objective is known to have many local minima due to cycle skipping. ","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<div style=\"background: #eeeeee; border: 2px solid gray; border-radius:5px; padding: 6px 10px 6px 10px;\">","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<h3> NOT FOR MANUSCRIPT</h3>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>Furthermore, since the solution is not unique it is generally not possible to unambiguously recover the parameterization of the subsurface from the given data alone, making FWI an active field of research (e.g. Leeuwen et al., 2013; Warner and Guasch, 2014; Peters and Herrmann, 2017).</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"</div>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"This tutorial demonstrates how we can set up a basic FWI framework with two alternative gradient-based optimization algorithms: stochastic gradient descent, and the Gauss–Newton method (Nocedal and Wright, 2009). ","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"We implement our inversion framework with the Julia Devito Inversion framework (JUDI), a parallel software package for seismic modeling and inversion in the Julia programming language. JUDI provides abstractions and function wrappers that allow the implementation of wave-equation-based inversion problems such as FWI using code that closely follows the mathematical notation, while using Devito’s automatic code generation for solving the underlying wave equations.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"All the code to run the algorithms and generate the figures in this paper can be found at http://github.com/SEG. ","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#Optimizing-the-FWI-objective-function","page":"Full-Waveform Inversion - Part 3: optimization","title":"Optimizing the FWI objective function","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"The goal of this tutorial series is to optimize the FWI objective function with the ell_2-misfit:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"\\mathop{\\hbox{minimize}}_{\\mathbf{m}} \\hspace{.2cm} f(\\mathbf{m})= \\sum_{i=1}^{n_s} \\frac{1}{2} \\left\\lVert \\mathbf{d}^\\mathrm{pred}_i (\\mathbf{m}, \\mathbf{q}_i) - \\mathbf{d}_i^\\mathrm{obs} \\right\\rVert_2^2,","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"where mathbfd^mathrmpred_i and mathbfd^mathrmobs_i are the predicted and observed seismic shot records of the i^textth source location and mathbfm is the velocity model (expressed as squared slowness). In part one, we demonstrated how to implement a forward modeling operator to generate the predicted shot records, which we will denote as mathbfd^mathrmpred_i = mathbfF(mathbfmmathbfq_i).  In the second tutorial, we then showed how we can compute the gradient nabla f(mathbfm) of the objective function and update our initial model using gradient descent.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"There is a snag, however. This first-order optimization algorithm has a linear convergence rate at best, and typically requires many iterations to converge. Second-order optimization methods converge considerably faster. To implement them, we first approximate the objective with a second-order Taylor expansion:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"f(\\mathbf{m}) = f(\\mathbf{m}_0) + \\nabla f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\delta \\mathbf{m}^\\top \\nabla^2 f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\mathcal{O}(\\delta \\mathbf{m}^3),","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"where mathcalO(delta mathbfm^3) represents the error term, nabla f(mathbfm_0) is the gradient as implemented in part two, and nabla^2 f(mathbfm_0) is the Hessian of the objective function, which we will refer to as mathbfH. Rather than using the negative gradient to incrementally update our model, as in gradient descent, we directly calculate a model update delta mathbfm that leads us to the minimum. This is called Newton's method:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"\\delta \\mathbf{m} = - \\mathbf{H}(\\mathbf{m}_0)^{-1} \\nabla f(\\mathbf{m}_0).","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Although the method converges to the minimum of the FWI objective function quickly, it comes at the cost of having to compute and invert the Hessian matrix (Nocedal and Wright, 2009). Fortunately, for least squares problems, such as FWI, the Hessian can be approximated by the Gauss-Newton (GN) Hessian mathbfJ^top mathbfJ, where mathbfJ is the Jacobian matrix. This is the partial derivative of the forward modeling operator mathbfF(mathbfmmathbfq) with respect to mathbfm — something we can easily compute. Furthermore, the Jacobian can also be used to express the gradient of the FWI objective function as nabla f(mathbfm_0) = mathbfJ^top (mathbfd^mathrmpred_i - mathbfd_i^mathrmobs), where mathbfJ^top is the adjoint (transposed) Jacobian. This is useful, because we now have a set of operators mathbfF mathbfJ and mathbfH_GN=mathbfJ^topmathbfJ, through which we can express both first and second order optimization algorithms for FWI.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Although forming these matrices explicitly is not possible, since they can become extremely large, we only need the action of these operators on vectors. This allows us to implement these operators matrix-free. In the following section we will demonstrate how to set up these operators in our JUDI software framework and to how to use them to implement FWI algorithms.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<div style=\"background: #eeeeee; border: 2px solid gray; border-radius:5px; padding: 6px 10px 6px 10px;\">","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<h3> NOT FOR MANUSCRIPT</h3>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>[SegyIO]:https://github.com/slimgroup/SegyIO.jl</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>The Julia Devito Inversion framework is a parallel matrix-free linear operator library for seismic modeling and inversion based on Devito and [SeisIO], a performant Julia package for reading and writing large data volumes in SEG-Y format. JUDI allows implementing seismic inversion algorithms as linear algebra operations, enabling rapid translations of FWI algorithms to executable Julia code. The underlying wave equations are set up and solved using Devito, as described in the first two tutorials, and are interfaced from Julia using the PyCall package (Johnson, 2017). </p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>For reading and writing SEG-Y data, JUDI uses the SeisIO package, a sophisticated SEG-Y reader that allows us to scan large 3D data sets for creating look-up tables with header summaries. However, since our data set is relatively small, we will directly load the full file into memory. The segy_read command takes the file name as an input and returns a dense data block. This is our observed data and we store it as a JUDI vector.</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"</div>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"# NOT FOR MANUSCRIPT\n# using Distributed\n# addprocs(4);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"using JUDI.TimeModeling, JUDI.SLIM_optim, SegyIO, Random, Statistics","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#Implementing-FWI-in-JUDI","page":"Full-Waveform Inversion - Part 3: optimization","title":"Implementing FWI in JUDI","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"We start our demonstration by reading our data set, which consists of 16 shot records and was generated with an excerpt from the SEG/EAGE Overthrust model (Aminzadeh et al. 1997). We store it as a judiVector:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"block = segy_read(\"overthrust_shot_records.segy\")\nd_obs = judiVector(block);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"using PyPlot\n\ni = 8\nfigure(figsize=(15,6))\nimshow(d_obs.data[i], cmap=\"seismic\", extent=[0,size(d_obs.data[i],2),2,0], aspect=\"auto\", vmin=-3, vmax=3)\nxlabel(\"Receiver number\", size=12)\nylabel(\"Time [s]\", size=12)\ntext(3, 0.13, \"Shot record $i\", size=16)\nshow()","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Figure 1: Observed shot record number 8.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"JUDI vectors such as d_obs can be used like a regular Julia vectors, so we can compute norms via norm(d_obs) or the inner product via dot(d_obs, d_obs), but they contain the shot records in their original dimension. Shot records can be accessed via their respective shot number with d_obs.data[shot_no], while the header information can be accessed with d_obs.geometry. We extract the source geometry from our SEG-Y file and then manually set up a source vector q with an 8 Hz Ricker wavelet:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"f = 0.008  # kHz\nsrc_geom = Geometry(block; key=\"source\")\nsrc_data = ricker_wavelet(src_geom.t[1], src_geom.dt[1], f)\nq = judiVector(src_geom, src_data);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"plot(q.data[1])\nshow()","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<div style=\"background: #eeeeee; border: 2px solid gray; border-radius:5px; padding: 6px 10px 6px 10px;\">","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<h3> NOT FOR MANUSCRIPT</h3>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>Since our data set consists of 16 shot records, both d_obs and q contain the data and geometries for all source positions. We can check the number of source positions with d_obs.nsrc and q.nsrc and we can extract the part of the vector that corresponds to one or multiple shots with d_obs[shot_no], q[shot_no]. </p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"</div>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"We will now set up the forward modeling operator mathbfF(mathbfmmathbfq) as a matrix-free operator for the inverse wave equation mathbfA(mathbfm)^-1, where mathbfm is the current model, and source/receiver injection and sampling operators mathbfP_mathrms and mathbfP_mathrmr.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Since the dimensions of the inverse wave equation operator depend on the number of computational time steps, we calculate this number using the get_computational_nt function and set up an info object that contains some dimensionality information required by all operators.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Then we can define Pr and Ps as matrix-free operators implementing Devito sparse point injection and interpolation (Louboutin et al., 2017). Multiplications with Ps and Pr represent sampling the wavefield at source/receiver locations, while their adjoints Ps', Pr' denote injecting either source wavelets or shot records into the computational grid.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"These projection and modelling operators can then be set up in Julia in the following way:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"using HDF5\n\nm0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\")\nmodel0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"ntComp = get_computational_nt(q.geometry, d_obs.geometry, model0)\ninfo = Info(prod(model0.n), d_obs.nsrc, ntComp)\nPr = judiProjection(info, d_obs.geometry)\nPs = judiProjection(info, q.geometry)\nAinv = judiModeling(info, model0);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"The forward modeling step can be expressed mathematically as","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"$","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"F(\\mathbf{m};\\mathbf{q})=\\mathbf{P}r\\mathbf{A}^{-1}(\\mathbf{m})\\mathbf{P}s^\\top\\mathbf{q} $","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"which is expressed in Julia as","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"d_pred = Pr * Ainv * Ps' * q","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"This forward models all 16 predicted shot records in parallel. Notice that, in instantiating Ainv, we made the wave equation solver implicitly dependent on model0.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Finally, we set up the matrix-free Jacobian operator J and the Gauss–Newton Hessian J' * J. As mentioned in the introduction, J is the partial derivative of the forward modeling operator mathbfF(mathbfm mathbfq) with respect to the model m and is therefore directly constructed from our modeling operator Pr * Ainv * Ps' and a specified source vector q:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"J = judiJacobian(Pr * Ainv * Ps', q);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<div style=\"background: #eeeeee; border: 2px solid gray; border-radius:5px; padding: 6px 10px 6px 10px;\">","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<h3> NOT FOR MANUSCRIPT</h3>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>Note that, if we started our Julia session with multiple CPU cores or nodes (julia -p n, with n being the number of workers), the wave equation solves are automatically parallelized over source locations and all shots are collected in the d_pred vector.</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>We can also model a single or subset of shots by indexing the operators with the respective shot numbers. E.g. if we want to model the first two shots, we define i=[1,2] and then run d_sub = Pr[i]*Ainv[i]*Ps[i]'*q[i].</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>The FWI gradient would then be given by:</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<pre style=\"background: #eeeeee;\"> g = J[i]' * (d_pred - d_obs[i]) </pre>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>If we want to solve an adjoint wave equation with the observed data as the adjoint source and restrictions of the wavefields back to the source locations, we can simply run qad = Ps * Ainv' * Pr' * d_obs, exemplifying the advantages of casting FWI in a proper computational linear algebra framework.</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>Once we have J we can also form the Gauss–Newton Hessian:</p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<pre style=\"background: #eeeeee;\"> H_GN = J' * J </pre>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"</div>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"In the context of seismic inversion, the Jacobian is also called the linearized modeling or demigration operator and its adjoint J' is the migration operator. One drawback of this notation is that the forward wavefields for the gradient calculation have to be recomputed, since the forward modeling operator only returns the shot records and not the complete wavefields. For this reason, JUDI has an additional function for computing the gradients of the FWI objective function f,g = fwi_objective(model0,q[i],d_obs[i]), which takes the current model, source and data vectors as an input and computes the objective value and gradient in parallel without having to recompute the forward wavefields.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#FWI-via-gradient-descent","page":"Full-Waveform Inversion - Part 3: optimization","title":"FWI via gradient descent","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"With expressions for modeling operators, Jacobians and gradients of the FWI objective, we can now implement different FWI algorithms in a few lines of code. We will start with a basic gradient descent example with a line search. To reduce the computational cost of full gradient descent, we will use a stochastic approach in which we only compute the gradient and function value for a randomized subset of source locations. In JUDI, this is accomplished by choosing a random vector of integers between 1 and 16 and indexing the data vectors as described earlier. Furthermore, we will apply a projection operator proj(x), which prevent velocities (or squared slownesses) becoming negative or too large by clipping values outside the allowed range.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"A few extra variables are defined in the notebook, but the full algorithm for FWI with stochastic gradient descent and box constraints is implemented as follows:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"# Set up bound constraints.\nv0 = sqrt.(1f0./model0.m)\nvmin = ones(Float32, model0.n) .* 1.3f0\nvmax = ones(Float32, model0.n) .* 6.5f0\n\n# Fix water column.\nvmin[:,1:21] = v0[:,1:21]\nvmax[:,1:21] = v0[:,1:21]\n\n# Convert to squared slowness.\nmmin = vec((1f0./vmax).^2)\nmmax = vec((1f0./vmin).^2);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"maxiter = 10\nbatchsize = 8    # Number of shots for each iteration.\nproj(x) = reshape(median([vec(mmin) vec(x) vec(mmax)], dims=2), model0.n)\nfhistory_SGD = zeros(Float32, maxiter);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"for j=1:maxiter\n    \n    # FWI objective function value and gradient.\n    i = randperm(d_obs.nsrc)[1:batchsize]\n    fval, grad = fwi_objective(model0, q[i], d_obs[i])\n    fhistory_SGD[j] = fval\n\n    # Line search and update model.\n    update = backtracking_linesearch(model0, q[i], d_obs[i], fval, grad, proj; alpha=1f0)\n    model0.m += reshape(update, model0.n)\n\n    # Apply box constraints.\n    model0.m = proj(model0.m)\nend","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"model_SGD = copy(model0.m);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"JUDI's backtracking_linesearch function performs an approximate line search and returns a model update that leads to a decrease of the objective function value (Armijo condition; Nocedal and Wright, 2009). The result after 10 iterations of SGD with box constraints is shown in Figure 2. In practice, where starting models are typically less accurate than in our example, FWI is often performed from low to high frequencies, since the objective function has less local minima for lower frequencies (Bunks et al., 1995). In this multi-scale FWI approach, a low-pass filtered version of the data is used to invert for a low resolution velocity model first and higher frequencies are added in subsequent iterations.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#FWI-via-the-Gauss–Newton-method","page":"Full-Waveform Inversion - Part 3: optimization","title":"FWI via the Gauss–Newton method","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"As discussed earlier, the convergence rate of GD depends on the objective function, but requires many FWI iterations necessary to reach an acceptable solution. Using our matrix-free operator for the Jacobian J, we can modify the above code to implement the Gauss–Newton method (Equation 3) to improve the convergence rate. In practice, directly inverting the Gauss–Newton Hessian J'* J should be avoided, because the matrix is badly conditioned and takes many iterations to invert. Instead, we perform a few iterations of a least-squares solver, lsqr(), to approximately solve J * p = d_pred - d_obs and obtain the update direction p. lsqr,  from the Julia IterativeSolvers package, is a conjugate-gradient type algorithm for solving least squares problems and is mathematically equivalent to inverting J' * J, but has better numerical properties (Paige and Saunders, 1982). We implement the Gauss-Newton method as follows:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"model0.m = m0    # Reset velocity model.\nfhistory_GN = zeros(Float32,maxiter);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"using IterativeSolvers\n\n# Return data as Julia array\nAinv.options.return_array = true\nd_vec = convert_to_array(d_obs)\n\nfor j=1:maxiter\n    \n    # Model predicted data.\n    d_pred = Pr * Ainv * Ps' * q\n\n    # GN update direction.\n    p = lsqr(J, d_pred - d_obs; maxiter=6)\n    fhistory_GN[j] = .5f0 * norm(d_pred - d_vec)^2  # OMIT LINE FROM MANUSCRIPT\n\n    # update model and box constraints.\n    model0.m = model0.m - reshape(p, model0.n)\nend","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<div style=\"background: #eeeeee; border: 2px solid gray; border-radius:5px; padding: 6px 10px 6px 10px;\">","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<h3> NOT FOR MANUSCRIPT</h3>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"<p>An important benefit of matrix-free operators is that we do not need to implement our own least-squares solver, but can pass J and the data residual d_pred - d_obs to a third-party optimization library. The operator J does not need to be an explicit matrix, since lsqr only uses matrix-vector products. </p>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"</div>","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"In contrast to our SGD algorithm, we use all shot records in every iteration, since stochastic methods for second order algorithms are less well understood, making this approach considerably more expensive than our previous algorithm. However, as shown in figures 2 and 3, it achieves a superior result, with a considerably lower misfit compared to the known model. Furthermore, figure 3 shows that it achieves the improved result in relatively few iterations.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"figure(figsize=(15, 12))\n\nsubplot(311)\nimshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4)\ntext(0.15, 0.3, \"Starting model\", size=14, color=\"black\")\nylabel(\"Depth [km]\", size=12)\ncolorbar()\ntext(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90)\n\nsubplot(312)\nimshow(sqrt.(1f0./model_SGD)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4)\nmisfit = round(fhistory_SGD[end])\ntext(0.15, 0.3, \"Gradient descent, misfit = $misfit\", size=14, color=\"black\")\nylabel(\"Depth [km]\", size=12)\ncolorbar()\ntext(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90)\n\nsubplot(313)\nimshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4)\nmisfit = round(fhistory_GN[end])\ntext(0.15, 0.3, \"Gauss–Newton, misfit = $misfit\", size=14, color=\"black\")\nxlabel(\"Lateral position [km]\", size=12)\nylabel(\"Depth [km]\", size=12)\ncolorbar()\ntext(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90)\n\nshow()","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"fhistory_SGD = fhistory_SGD/norm(fhistory_SGD, Inf)\nfhistory_GN = fhistory_GN/norm(fhistory_GN, Inf);","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"figure(figsize=(8,3))\nplot(1:10, fhistory_SGD, label=\"Gradient descent\")\nplot(1:10, fhistory_GN, label=\"Gauss–Newton\")\ntext(9.8, 0.28, \"Gradient descent\", ha=\"right\", color=\"steelblue\")\ntext(9.8, 0.09, \"Gauss–Newton\", ha=\"right\", color=\"chocolate\")\nxlabel(\"Iteration number\", size=12)\nylabel(\"Misfit\", size=12)\nxlim(1, 10)\nshow()","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Figure 3: Normalized function values for the FWI inversion example with stochastic gradient descent and the Gauss-Newton method.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"An alternative to (Gauss–)Newton methods are quasi-Newton methods, which build up an approximation of the Hessian from previous gradients only and require no additional PDE solves or matrix inversions. Implementing an efficient and correct version of this method, such as the L-BFGS algorithm, exceeds a few lines of code and we therefore leave this exercise to the reader. Instead of implementing more complicated algorithms by hand, it is also possible to interface third-party Julia optimization libraries and an example for this is given in the notebook fwiexampleNLopt.ipynb.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Even though all examples shown here are two-dimensional, in order to make them reproducible on a laptop or desktop PC, JUDI can be used for 3D modeling and inversion without having to change the code, since the number of dimensions are automatically inferred from the velocity model and data dimensions.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#Conclusions","page":"Full-Waveform Inversion - Part 3: optimization","title":"Conclusions","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"In this final part of our FWI tutorial series, we demonstrated how to set up basic optimization algorithms for waveform inversion using JUDI. The methods shown here are all gradient based and differ in the way how update directions for the velocity model are computed. Our numerical examples can serve for the reader as a basis for developing more advanced FWI workflows, which usually include additional data preprocessing, frequency continuation techniques or further model constraints.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#Acknowledgments","page":"Full-Waveform Inversion - Part 3: optimization","title":"Acknowledgments","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"This research was carried out as part of the SINBAD II project with the support of the member organizations of the SINBAD Consortium. This work was financially supported in part by EPSRC grant EP/L000407/1 and the Imperial College London Intel Parallel Computing Centre.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/#References","page":"Full-Waveform Inversion - Part 3: optimization","title":"References","text":"","category":"section"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Aminzadeh, F., Brac, J., and Kunz, T., 1997. 3D Salt and Overthrust models. SEG/EAGE Modeling Series, No. 1: Distribution CD of Salt and Overthrust models, SEG Book Series Tulsa, Oklahoma.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Bezanson, J., Karpinski, S., Shah, V. B., and Edelman, A., 2012, Julia: A fast dynamic language for technical computing: CoRR. Retrieved from http://arxiv.org/abs/1209.5145","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Bunks, C., Saleck, F. M., Zaleski, S., and Chavent, G., 1995, Multiscale seismic waveform inversion: GEOPHYSICS, 60, 1457–1473. doi:10.1190/1.1443880","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Johnson, S., 2017, Calling python functions from the julia language: GitHub repository. https://github.com/JuliaPy/PyCall.jl; GitHub.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Lange, M., Kukreja, N., Louboutin, M., Luporini, F., Zacarias, F. V., Pandolfo, V., … Gorman, G., 2016, Devito: Towards a generic finite difference DSL using symbolic python: 6th workshop on python for high-performance and scientific computing. doi:10.1109/PyHPC.2016.9","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Leeuwen, T. van, Aravkin, A. Y., Calandra, H., and Herrmann, F. J., 2013, In which domain should we measure the misfit for robust full waveform inversion? EAGE annual conference proceedings. doi:10.3997/2214-4609.20130839","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2017, Full-waveform inversion - part 1: Forward modeling: Retrieved from https://www.slim.eos.ubc.ca/Publications/Private/Submitted/2017/louboutin2017fwi/louboutin2017fwi.html","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2018, Full-waveform inversion - part 2: Adjoint modeling:","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Nocedal, J., and Wright, S., 2009, Numerical optimization: (2nd ed.). Springer.","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Paige, C. C., and Saunders, M. A., 1982, LSQR: An algorithm for sparse linear equations and sparse least squares: ACM Trans. Math. Softw., 8, 43–71. doi:10.1145/355984.355989","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Peters, B., and Herrmann, F. J., 2017, Constraints versus penalties for edge-preserving full-waveform inversion: The Leading Edge, 36, 94–100. doi:10.1190/tle36010094.1","category":"page"},{"location":"tutorials/judi_leading_edge_tutorial/","page":"Full-Waveform Inversion - Part 3: optimization","title":"Full-Waveform Inversion - Part 3: optimization","text":"Warner, M., and Guasch, L., 2014, Adaptive waveform inversion: Theory: In SEG technical program expanded abstracts 2014 (pp. 1089–1093). doi:10.1190/segam2014-0371.1","category":"page"},{"location":"abstract_vectors/#Abstract-Vectors","page":"Abstract vectors","title":"Abstract Vectors","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"JUDI provides abstract vector types that encapsulate seismic related objects. In particula, JUDI defines thre main types for seismic data judiVector, full time-space wavefields judiWavefield and extended source weights judiWeights.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Pages = [\"abstract_vectors.md\"]","category":"page"},{"location":"abstract_vectors/#judiVector","page":"Abstract vectors","title":"judiVector","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"The class judiVector is the basic data structure for seismic shot records or seismic sources. From JUDI's perspective, both are treated the same and can be multiplied with modeling operators.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"In the most basic way, judiVectors are contstructed from a Geometry object (containing either source or receiver geometry) and a cell array of data:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"judiVector(geometry::Geometry, data::Array{T, N}) where {T, N}","category":"page"},{"location":"abstract_vectors/#JUDI.judiVector-Union{Tuple{N}, Tuple{T}, Tuple{Geometry, Array{T, N}}} where {T, N}","page":"Abstract vectors","title":"JUDI.judiVector","text":"judiVector\n    name::String\n    m::Integer\n    n::Integer\n    nsrc::Integer\n    geometry::Geometry\n    data\n\nAbstract vector for seismic data. This vector-like structure contains the geometry and data for either\nreceiver data (shot records) or source data (wavelets).\n\nConstructors\n\nConstruct vector from Geometry structure and cell array of shot records or wavelets. The data keyword\ncan also be a single (non-cell) array, in which case the data is the same for all source positions:\n\njudiVector(geometry, data)\n\nConstruct vector for observed data from SegyIO.SeisBlock. segy_depth_key is the SegyIO keyword \nthat contains the receiver depth coordinate:\n\njudiVector(SegyIO.SeisBlock; segy_depth_key=\"RecGroupElevation\")\n\nConstruct vector for observed data from out-of-core data container of type SegyIO.SeisCon:\n\njudiVector(SegyIO.SeisCon; segy_depth_key=\"RecGroupElevation\")\n\nExamples\n\n(1) Construct data vector from Geometry structure and a cell array of shot records:\n\ndobs = judiVector(rec_geometry, shot_records)\n\n(2) Construct data vector for a seismic wavelet (can be either cell arrays of individual\nwavelets or a single wavelet as an array):\n\nq = judiVector(src_geometry, wavelet)\n\n(3) Construct data vector from SegyIO.SeisBlock object:\n\nusing SegyIO\nseis_block = segy_read(\"test_file.segy\")\ndobs = judiVector(seis_block; segy_depth_key=\"RecGroupElevation\")\n\n(4) Construct out-of-core data vector from SegyIO.SeisCon object (for large SEG-Y files):\n\nusing SegyIO\nseis_container = segy_scan(\"/path/to/data/directory\",\"filenames\",[\"GroupX\",\"GroupY\",\"RecGroupElevation\",\"SourceDepth\",\"dt\"])\ndobs = judiVector(seis_container; segy_depth_key=\"RecGroupElevation\")\n\n\n\n\n\n","category":"method"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields (in-core data containers):","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Access i-th shot record\nx.data[i]\n\n# Extract judiVector for i-th shot\nx1 = x[i]\n\n# Access j-th receiver location of i-th shot\nx.geometry.xloc[i][j]","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields (out-of-core data containers):","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Access data container of i-th shot\nx.data[i]\n\n# Read data from i-th shot into memory\nx.data[i][1].data\n\n# Access out-of-core geometry\nx.geometry\n\n# Load OOC geometry into memory\nGeometry(x.geometry)","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Operations:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"In-core judiVectors can be used like regular Julia arrays and support common operations such as:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"x = judiVector(geometry, data)\n\n# Size (as if all data was vectorized)\nsize(x)\n\n# Norms\nnorm(x)\n\n# Inner product\ndot(x, x)\n\n# Addition, subtraction (geometries must match)\ny = x + x\nz = x - y\n\n# Scaling\nα = 2f0\ny = x * α\n\n# Concatenate\ny = vcat(x, x)","category":"page"},{"location":"abstract_vectors/#judiWavefield","page":"Abstract vectors","title":"judiWavefield","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Abstract vector class for wavefields. ","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":" judiWavefield(info,dt::Real,data::Union{AbstractArray, String};  vDT::DataType=Float32)","category":"page"},{"location":"abstract_vectors/#JUDI.judiWavefield-Tuple{Any, Real, Union{String, AbstractArray}}","page":"Abstract vectors","title":"JUDI.judiWavefield","text":"judiWavefield         name::String         m::Integer         n::Integer         info::Info         dt::Real         data\n\nAbstract vector for seismic wavefields.\n\nConstructors\n\nConstruct wavefield vector from an info structure, a cell array of wavefields and the computational \ntime step dt:\n\njudiWavefield(info, nt, data)\n\n\n\n\n\n","category":"method"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Access wavefield from i-th shot location\nu.data[i]","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Operations:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Supports some basic arithmetric operations:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Size \nsize(u)\n\n# Norms\nnorm(u)\n\n# Inner product \ndot(u, y)\n\n# Addition, subtraction\nv = u + u\nz = u - v\n\n# Absolute value\nabs(u)\n\n# Concatenation\nv = vcat(u, u)","category":"page"},{"location":"abstract_vectors/#judiRHS","page":"Abstract vectors","title":"judiRHS","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Abstract vector class for a right-hand-side (RHS). A RHS has the size of a full wavefield, but only contains the data of the source wavelet of shot records in memory, as well as the geometry information of where the data is injected during modeling.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"judiRHS(info, geometry, data;vDT::DataType=Float32)","category":"page"},{"location":"abstract_vectors/#JUDI.judiRHS-Tuple{Any, Any, Any}","page":"Abstract vectors","title":"JUDI.judiRHS","text":"judiRHS\n    name::String\n    m::Integer\n    n::Integer\n    info::Info\n    geometry::Geometry\n    data\n\nAbstract sparse vector for right-hand-sides of the modeling operators. The judiRHS vector has the\ndimensions of the full time history of the wavefields, but contains only the data defined at the \nsource or receiver positions (i.e. wavelets or shot records).\n\nConstructor\n\njudiRHS(info, geometry, data)\n\nExamples\n\nAssuming Pr and Ps are projection operators of type judiProjection and dobs and q are\nseismic vectors of type judiVector, then a judiRHS vector can be created as follows:\n\nrhs = Pr'*dobs    # right-hand-side with injected observed data\nrhs = Ps'*q    # right-hand-side with injected wavelet\n\n\n\n\n\n","category":"method"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"A JUDI RHS can also be constructed by multplying a judiVector and the corresponding transpose of a judiProjection operator:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"rhs1 = Ps'*q\nrhs2 = Pr'*d_obs","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"where Ps and Pr are judiProjection operators for sources and receivers respectively and q and d_obs are judiVectors with the source and receiver data.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Accessible fields include:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Source/receiver data\nrhs.data\n\n# Source/receiver geometry\nrhs.geometry\n\n# Info structure\nrhs.info","category":"page"},{"location":"abstract_vectors/#judiWeights","page":"Abstract vectors","title":"judiWeights","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Abstract vector class for extended source weights. The weights for each shot location have the dimensions of the model (namely model.n).","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"judiWeights(weights::Array{T, N}; nsrc=1, vDT::DataType=Float32) where {T<:Real, N}","category":"page"},{"location":"abstract_vectors/#JUDI.judiWeights-Union{Tuple{Array{T, N}}, Tuple{N}, Tuple{T}} where {T<:Real, N}","page":"Abstract vectors","title":"JUDI.judiWeights","text":"judiWeights\n    name::String\n    m::Integer\n    n::Integer\n    nsrc::Integer\n    weights\n\nAbstract vector for weighting an extended source, which is injected at every grid point, as weighted by this vector. Constructors ============ Construct vector cell array of weights. The weights keyword\ncan also be a single (non-cell) array, in which case the weights are the same for all source positions:     judiWeights(weights; nsrc=1)\n\n\n\n\n\n","category":"method"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Parameters:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"weights: Cell array with one cell per shot location. Each cell contains a 2D/3D Julia array with the weights for the spatially extended source. Alternatively: pass a single Julia array which will be used for all source locations.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Access weights of i-th shot locatoin\nw.weights[i]","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Operations:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Supports the same arithmetric operations as a judiVector.","category":"page"},{"location":"abstract_vectors/#judiExtendedSource","page":"Abstract vectors","title":"judiExtendedSource","text":"","category":"section"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Abstract data vector for an extended source. This data structure is the equivalent type of judiRHS for extended source modeling. A judiExtendedSource has the dimension of the full wavefield, but only contains the 1D wavelet and the 2D/3D spatially varying weights in memory.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Construction from weights and source wavelets:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"judiExtendedSource(info,wavelet,weights;vDT::DataType=Float32)","category":"page"},{"location":"abstract_vectors/#JUDI.judiExtendedSource-Tuple{Any, Any, Any}","page":"Abstract vectors","title":"JUDI.judiExtendedSource","text":"judiExtendedSource\n    name::String\n    m::Integer\n    n::Integer\n    info::Info\n    wavelet\n    weights\n\nAbstract sparse vector for an extended source. The judiRHS vector has the\ndimensions of the full time history of the wavefields, but contains only the wavelet, \nas well as the weights of the extended source. Constructor ==========     judiExtendedSource(info, wavelet, weights) Examples ======== Assuming Pw ia a projection operators of type judiLRWF and w is a seismic weight \nvector of type judiWeights, then a judiExtendedSource vector can be created as follows:     q_ext = adjoint(Pw)*w    # abstract extended source\n\n\n\n\n\n","category":"method"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Or alternatively, construction from a judiWeights vector and a judiLRWF injection operator:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"ex_src = Pw'*w","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"where Pw is a judiLRWF operator and w is a judiWeights vector.","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"Access fields:","category":"page"},{"location":"abstract_vectors/","page":"Abstract vectors","title":"Abstract vectors","text":"# Access weights of i-th source location\nex_src.weights[i]\n\n# Access wavelet of i-th source location\nex_src.wavelet[i]","category":"page"},{"location":"#The-Julia-Devito-Inversion-framework-(JUDI.jl)","page":"Home","title":"The Julia Devito Inversion framework (JUDI.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. Wave equations in JUDI are solved with Devito, a Python domain-specific language for automated finite-difference (FD) computations. ","category":"page"},{"location":"#Docs-overview","page":"Home","title":"Docs overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation provides an overview over JUDI's basic data structures and abstract operators:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation: Install guidlines for JUDI and compilers.\nTutorials: Shows basic functionalities and some common applications.\nData structures: Explains the Model, Geometry and Info data structures and how to set up acquisition geometries.\nAbstract Vectors: Documents JUDI's abstract vector classes judiVector, judiWavefield, judiRHS, judiWeights and judiExtendedSource.\nLinear Operators: Lists and explains JUDI's abstract linear operators judiModeling, judiJacobian, judiProjection and judiLRWF.\nInput/Output: Read SEG-Y data and set up judiVectors for shot records and sources. Read velocity models.\nHelper functions: API of functions that make your life easier.\nSeismic Inversion: Inversion utility functions to avoid recomputation and memry overhead.\nSeismic Preconditioners: Basic preconditioners for seismic imaging.\npysource package: API reference for the propagators implementation with Devito in python. The API is the backend of JUDI handled with PyCall.","category":"page"}]
}
